"use strict";(self.webpackChunkweb=self.webpackChunkweb||[]).push([[6033],{28030:(e,t,n)=>{n.d(t,{Z:()=>r});var a=n(23612),i=n(39960),o=n(67294);function r(){return o.createElement("div",{style:{position:"sticky",top:"calc(var(--ifm-navbar-height) + 1rem)",zIndex:1}},o.createElement(a.Z,{type:"caution",title:"Deprecated Page"},"This page is part of a previous documentation version and is no longer actively maintained. The content is likely out of date and may no longer be relevant to current releases.",o.createElement("br",null),o.createElement("br",null),"Go to the ",o.createElement(i.Z,{to:"/docs"},"current documentation")," for updated content."))}},46300:(e,t,n)=>{n.d(t,{Z:()=>o});var a=n(67294),i=n(50012);function o(e){let{path:t}=e;const[n]=(0,i.Nk)("docusaurus.tab.js-ts"),o=t.lastIndexOf("{"),r=t.slice(o+1,t.length-1),[s,l]=r.split(","),p=t.slice(0,o);return a.createElement("code",null,p+("js"===n?s:l))}},39820:(e,t,n)=>{n.d(t,{ZP:()=>s});var a=n(87462),i=(n(67294),n(3905));n(46300);const o={toc:[]},r="wrapper";function s(e){let{components:t,...n}=e;return(0,i.kt)(r,(0,a.Z)({},o,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("admonition",{title:"Sending emails while developing",type:"info"},(0,i.kt)("p",{parentName:"admonition"},"When you run your app in development mode, the emails are not sent. Instead, they are logged to the console."),(0,i.kt)("p",{parentName:"admonition"},"To enable sending emails in development mode, you need to set the ",(0,i.kt)("inlineCode",{parentName:"p"},"SEND_EMAILS_IN_DEVELOPMENT")," env variable to ",(0,i.kt)("inlineCode",{parentName:"p"},"true")," in your ",(0,i.kt)("inlineCode",{parentName:"p"},".env.server")," file.")))}s.isMDXComponent=!0},53523:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>m,contentTitle:()=>d,default:()=>g,frontMatter:()=>p,metadata:()=>u,toc:()=>c});var a=n(87462),i=(n(67294),n(3905)),o=n(85162),r=n(74866),s=n(39820),l=n(28030);const p={title:"Features"},d=void 0,u={unversionedId:"language/features",id:"language/features",title:"Features",description:"App",source:"@site/docs/language/features.md",sourceDirName:"language",slug:"/language/features",permalink:"/docs/language/features",draft:!1,editUrl:"https://github.com/wasp-lang/wasp/edit/release/web/docs/language/features.md",tags:[],version:"current",frontMatter:{title:"Features"}},m={},c=[{value:"App",id:"app",level:2},{value:"Fields",id:"fields",level:3},{value:"<code>wasp: dict</code> (required)",id:"wasp-dict-required",level:4},{value:"<code>title: string</code> (required)",id:"title-string-required",level:4},{value:"<code>head: [string]</code> (optional)",id:"head-string-optional",level:4},{value:"<code>auth: dict</code> (optional)",id:"auth-dict-optional",level:4},{value:"<code>client: dict</code> (optional)",id:"client-dict-optional",level:4},{value:"<code>server: dict</code> (optional)",id:"server-dict-optional",level:4},{value:"<code>db: dict</code> (optional)",id:"db-dict-optional",level:4},{value:"<code>dependencies: [(string, string)]</code> (optional)",id:"dependencies-string-string-optional",level:4},{value:"<code>emailSender: dict</code> (optional)",id:"emailsender-dict-optional",level:4},{value:"<code>webSocket: dict</code> (optional)",id:"websocket-dict-optional",level:4},{value:"Page",id:"page",level:2},{value:"Fields",id:"fields-1",level:3},{value:"<code>component: ClientImport</code> (required)",id:"component-clientimport-required",level:4},{value:"<code>authRequired: bool</code> (optional)",id:"authrequired-bool-optional",level:4},{value:"Route",id:"route",level:2},{value:"Fields",id:"fields-2",level:3},{value:"<code>path: string</code> (required)",id:"path-string-required",level:4},{value:"<code>to: page</code> (required)",id:"to-page-required",level:4},{value:"Example - parametrised URL path",id:"example---parametrised-url-path",level:3},{value:"Accessing route parameters in a page component",id:"accessing-route-parameters-in-a-page-component",level:3},{value:"Navigating between routes",id:"navigating-between-routes",level:3},{value:"Entity",id:"entity",level:2},{value:"<code>{=psl ... psl=}: PSL</code>",id:"psl--psl-psl",level:3},{value:"Using Entities",id:"using-entities",level:3},{value:"Using Entities in Operations",id:"using-entities-in-operations",level:4},{value:"Using Entities directly",id:"using-entities-directly",level:4},{value:"Queries and Actions (aka Operations)",id:"queries-and-actions-aka-operations",level:2},{value:"Query",id:"query",level:3},{value:"Defining the Query&#39;s NodeJS implementation",id:"defining-the-querys-nodejs-implementation",level:4},{value:"Declaring a Query in Wasp",id:"declaring-a-query-in-wasp",level:4},{value:"Using the Query",id:"using-the-query",level:4},{value:"The <code>useQuery</code> hook",id:"the-usequery-hook",level:4},{value:"Error Handling",id:"error-handling",level:4},{value:"Using Entities in Queries",id:"using-entities-in-queries",level:4},{value:"Action",id:"action",level:3},{value:"The <code>useAction</code> hook",id:"the-useaction-hook",level:4},{value:"Advanced usage",id:"advanced-usage",level:4},{value:"Cache Invalidation",id:"cache-invalidation",level:3},{value:"Prisma Error Helpers",id:"prisma-error-helpers",level:3},{value:"<code>import statement</code>:",id:"import-statement",level:4},{value:"Example of usage:",id:"example-of-usage",level:5},{value:"CRUD operations on top of entities",id:"crud-operations-on-top-of-entities",level:3},{value:"Which operations are supported?",id:"which-operations-are-supported",level:4},{value:"CRUD declaration",id:"crud-declaration",level:4},{value:"Defining the overrides",id:"defining-the-overrides",level:4},{value:"Using the CRUD operations in client code",id:"using-the-crud-operations-in-client-code",level:4},{value:"APIs",id:"apis",level:2},{value:"API",id:"api",level:3},{value:"Defining the APIs NodeJS implementation",id:"defining-the-apis-nodejs-implementation",level:4},{value:"Simple API example",id:"simple-api-example",level:5},{value:"More complicated TypeScript example",id:"more-complicated-typescript-example",level:5},{value:"Declaring an API in Wasp",id:"declaring-an-api-in-wasp",level:4},{value:"Using the API",id:"using-the-api",level:4},{value:"Using Entities in APIs",id:"using-entities-in-apis",level:4},{value:"apiNamespace",id:"apinamespace",level:3},{value:"Jobs",id:"jobs",level:2},{value:"Job Executors",id:"job-executors",level:3},{value:"pg-boss",id:"pg-boss",level:4},{value:"Basic job definition and usage",id:"basic-job-definition-and-usage",level:3},{value:"Recurring jobs",id:"recurring-jobs",level:3},{value:"Fully specified example",id:"fully-specified-example",level:3},{value:"Fields",id:"fields-3",level:3},{value:"<code>executor: JobExecutor</code> (required)",id:"executor-jobexecutor-required",level:4},{value:"<code>perform: dict</code> (required)",id:"perform-dict-required",level:4},{value:"<code>schedule: dict</code> (optional)",id:"schedule-dict-optional",level:4},{value:"<code>entities: [Entity]</code> (optional)",id:"entities-entity-optional",level:4},{value:"JavaScript API",id:"javascript-api",level:3},{value:"Invocation",id:"invocation",level:4},{value:"<code>import</code>",id:"import",level:5},{value:"<code>submit(jobArgs, executorOptions)</code>",id:"submitjobargs-executoroptions",level:5},{value:"<code>delay(startAfter)</code> (optional)",id:"delaystartafter-optional",level:5},{value:"Tracking",id:"tracking",level:4},{value:"Dependencies",id:"dependencies",level:2},{value:"Authentication &amp; Authorization",id:"authentication--authorization",level:2},{value:"<code>userEntity: entity</code> (required)",id:"userentity-entity-required",level:4},{value:"<code>externalAuthEntity: entity</code> (optional)",id:"externalauthentity-entity-optional",level:4},{value:"<code>methods: dict</code> (required)",id:"methods-dict-required",level:4},{value:"<code>onAuthFailedRedirectTo: String</code> (required)",id:"onauthfailedredirectto-string-required",level:4},{value:"<code>onAuthSucceededRedirectTo: String</code> (optional)",id:"onauthsucceededredirectto-string-optional",level:4},{value:"Username and Password",id:"username-and-password",level:3},{value:"High-level API",id:"high-level-api",level:4},{value:"Lower-level API",id:"lower-level-api",level:4},{value:"Customizing user entity validations",id:"customizing-user-entity-validations",level:5},{value:"Specification",id:"specification",level:4},{value:"<code>login()</code>",id:"login",level:4},{value:"<code>username: string</code>",id:"username-string",level:4},{value:"<code>password: string</code>",id:"password-string",level:4},{value:"<code>import statement</code>:",id:"import-statement-1",level:4},{value:"<code>signup()</code>",id:"signup",level:4},{value:"<code>userFields: object</code>",id:"userfields-object",level:4},{value:"<code>import statement</code>:",id:"import-statement-2",level:4},{value:"<code>logout()</code>",id:"logout",level:4},{value:"<code>import statement</code>:",id:"import-statement-3",level:4},{value:"Example of usage:",id:"example-of-usage-1",level:5},{value:"Updating a user&#39;s password",id:"updating-a-users-password",level:4},{value:"Email authentication",id:"email-authentication",level:3},{value:"Fields in the <code>email</code> dict",id:"fields-in-the-email-dict",level:4},{value:"<code>fromField: EmailFromField</code> (required)",id:"fromfield-emailfromfield-required",level:5},{value:"<code>emailVerification: EmailVerificationConfig</code> (required)",id:"emailverification-emailverificationconfig-required",level:5},{value:"<code>passwordReset: PasswordResetConfig</code> (required)",id:"passwordreset-passwordresetconfig-required",level:5},{value:"<code>allowUnverifiedLogin: bool</code>: a boolean that specifies whether the user can login without verifying their e-mail address. (optional)",id:"allowunverifiedlogin-bool-a-boolean-that-specifies-whether-the-user-can-login-without-verifying-their-e-mail-address-optional",level:5},{value:"Email sender for email authentication",id:"email-sender-for-email-authentication",level:4},{value:"Validations",id:"validations",level:4},{value:"Social Login Providers (OAuth 2.0)",id:"social-login-providers-oauth-20",level:3},{value:"Default Settings",id:"default-settings",level:4},{value:"<code>externalAuthEntity</code>",id:"externalauthentity",level:4},{value:"UI helpers",id:"ui-helpers",level:4},{value:"Overrides",id:"overrides",level:4},{value:"<code>configFn</code>",id:"configfn",level:4},{value:"<code>getUserFieldsFn</code>",id:"getuserfieldsfn",level:4},{value:"Validation Error Handling",id:"validation-error-handling",level:3},{value:"<code>import statement</code>:",id:"import-statement-4",level:4},{value:"Example of usage:",id:"example-of-usage-2",level:5},{value:"Accessing the currently logged in user",id:"accessing-the-currently-logged-in-user",level:2},{value:"On the client",id:"on-the-client",level:4},{value:"<code>useAuth()</code>",id:"useauth",level:3},{value:"<code>import statement</code>:",id:"import-statement-5",level:4},{value:"Example of usage:",id:"example-of-usage-3",level:5},{value:"On the server",id:"on-the-server",level:4},{value:"<code>context.user</code>",id:"contextuser",level:3},{value:"Example of usage:",id:"example-of-usage-4",level:5},{value:"Client configuration",id:"client-configuration",level:2},{value:"<code>rootComponent: ClientImport</code> (optional)",id:"rootcomponent-clientimport-optional",level:4},{value:"<code>setupFn: ClientImport</code> (optional)",id:"setupfn-clientimport-optional",level:4},{value:"Overriding default behaviour for Queries",id:"overriding-default-behaviour-for-queries",level:5},{value:"Public static files on the client",id:"public-static-files-on-the-client",level:2},{value:"Server configuration",id:"server-configuration",level:2},{value:"<code>middlewareConfigFn: ServerImport</code> (optional)",id:"middlewareconfigfn-serverimport-optional",level:4},{value:"<code>setupFn: ServerImport</code> (optional)",id:"setupfn-serverimport-optional",level:4},{value:".env",id:"env",level:2},{value:"Database configuration",id:"database-configuration",level:2},{value:"- <code>system: DbSystem</code> (Optional)",id:"--system-dbsystem-optional",level:4},{value:"- <code>seeds: [ServerImport]</code> (Optional)",id:"--seeds-serverimport-optional",level:4},{value:"- <code>prisma: [PrismaOptions]</code> (Optional)",id:"--prisma-prismaoptions-optional",level:4},{value:"SQLite",id:"sqlite",level:3},{value:"PostgreSQL",id:"postgresql",level:3},{value:"Using Wasp provided dev database",id:"using-wasp-provided-dev-database",level:3},{value:"Connecting to existing database",id:"connecting-to-existing-database",level:3},{value:"Migrating from SQLite to PostgreSQL",id:"migrating-from-sqlite-to-postgresql",level:3},{value:"Seeding",id:"seeding",level:3},{value:"Writing a seed function",id:"writing-a-seed-function",level:4},{value:"Running seed functions",id:"running-seed-functions",level:4},{value:"Email sender",id:"email-sender",level:2},{value:"<code>provider: EmailProvider</code> (required)",id:"provider-emailprovider-required",level:4},{value:"SMTP",id:"smtp",level:3},{value:"SendGrid",id:"sendgrid",level:3},{value:"Mailgun",id:"mailgun",level:3},{value:"<code>defaultSender: EmailFromField</code> (optional)",id:"defaultsender-emailfromfield-optional",level:4},{value:"Sending e-mails",id:"sending-e-mails",level:3}],h={toc:c},k="wrapper";function g(e){let{components:t,...n}=e;return(0,i.kt)(k,(0,a.Z)({},h,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)(l.Z,{mdxType:"OldDocsNote"}),(0,i.kt)("h2",{id:"app"},"App"),(0,i.kt)("p",null,"There can be only one declaration of ",(0,i.kt)("inlineCode",{parentName:"p"},"app")," type per Wasp project.\nIt serves as a starting point and defines global properties of your app."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-wasp"},'app todoApp {\n  wasp: {\n    version: "^0.6.0"\n  },\n  title: "ToDo App",\n  head: [  // optional\n    "<link rel=\\"stylesheet\\" href=\\"https://fonts.googleapis.com/css?family=Roboto:300,400,500&display=swap\\" />"\n  ]\n}\n')),(0,i.kt)("h3",{id:"fields"},"Fields"),(0,i.kt)("h4",{id:"wasp-dict-required"},(0,i.kt)("inlineCode",{parentName:"h4"},"wasp: dict")," (required)"),(0,i.kt)("p",null,"Wasp compiler configuration. It is a dictionary with a single field:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"version: string")," (required) - version declares the compatible Wasp versions for the app. It should contain a valid ",(0,i.kt)("a",{parentName:"li",href:"https://github.com/npm/node-semver#ranges"},"SemVer range"),".")),(0,i.kt)("admonition",{type:"info"},(0,i.kt)("p",{parentName:"admonition"},"For now, the version field only supports caret ranges (i.e., ",(0,i.kt)("inlineCode",{parentName:"p"},"^x.y.z"),"). Support for the full specification will come in a future version of Wasp")),(0,i.kt)("h4",{id:"title-string-required"},(0,i.kt)("inlineCode",{parentName:"h4"},"title: string")," (required)"),(0,i.kt)("p",null,"Title of your app. It will be displayed in the browser tab, next to the favicon."),(0,i.kt)("h4",{id:"head-string-optional"},(0,i.kt)("inlineCode",{parentName:"h4"},"head: [string]")," (optional)"),(0,i.kt)("p",null,"Head of your HTML Document. Your app's metadata (styles, links, etc) can be added here."),(0,i.kt)("h4",{id:"auth-dict-optional"},(0,i.kt)("inlineCode",{parentName:"h4"},"auth: dict")," (optional)"),(0,i.kt)("p",null,"Authentication and authorization configuration.\nCheck ",(0,i.kt)("a",{parentName:"p",href:"/docs/language/features#authentication--authorization"},(0,i.kt)("inlineCode",{parentName:"a"},"app.auth"))," for more details."),(0,i.kt)("h4",{id:"client-dict-optional"},(0,i.kt)("inlineCode",{parentName:"h4"},"client: dict")," (optional)"),(0,i.kt)("p",null,"Client configuration.\nCheck ",(0,i.kt)("a",{parentName:"p",href:"/docs/language/features#client-configuration"},(0,i.kt)("inlineCode",{parentName:"a"},"app.client"))," for more details."),(0,i.kt)("h4",{id:"server-dict-optional"},(0,i.kt)("inlineCode",{parentName:"h4"},"server: dict")," (optional)"),(0,i.kt)("p",null,"Server configuration.\nCheck ",(0,i.kt)("a",{parentName:"p",href:"/docs/language/features#server-configuration"},(0,i.kt)("inlineCode",{parentName:"a"},"app.server"))," for more details."),(0,i.kt)("h4",{id:"db-dict-optional"},(0,i.kt)("inlineCode",{parentName:"h4"},"db: dict")," (optional)"),(0,i.kt)("p",null,"Database configuration.\nCheck ",(0,i.kt)("a",{parentName:"p",href:"/docs/language/features#database-configuration"},(0,i.kt)("inlineCode",{parentName:"a"},"app.db"))," for more details."),(0,i.kt)("h4",{id:"dependencies-string-string-optional"},(0,i.kt)("inlineCode",{parentName:"h4"},"dependencies: [(string, string)]")," (optional)"),(0,i.kt)("p",null,"List of dependencies (external libraries).\nCheck ",(0,i.kt)("a",{parentName:"p",href:"/docs/language/features#dependencies"},(0,i.kt)("inlineCode",{parentName:"a"},"app.dependencies"))," for more details."),(0,i.kt)("h4",{id:"emailsender-dict-optional"},(0,i.kt)("inlineCode",{parentName:"h4"},"emailSender: dict")," (optional)"),(0,i.kt)("p",null,"Email sender configuration.\nCheck ",(0,i.kt)("a",{parentName:"p",href:"/docs/language/features#email-sender"},(0,i.kt)("inlineCode",{parentName:"a"},"app.emailSender"))," for more details."),(0,i.kt)("h4",{id:"websocket-dict-optional"},(0,i.kt)("inlineCode",{parentName:"h4"},"webSocket: dict")," (optional)"),(0,i.kt)("p",null,"WebSocket configuration.\nCheck out the ",(0,i.kt)("a",{parentName:"p",href:"/docs/guides/websockets"},(0,i.kt)("inlineCode",{parentName:"a"},"WebSocket guide"))," for more details."),(0,i.kt)("h2",{id:"page"},"Page"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"page")," declaration is the top-level layout abstraction. Your app can have multiple pages."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-wasp"},'page MainPage {\n  component: import Main from "@client/pages/Main",\n  authRequired: false  // optional\n}\n')),(0,i.kt)("p",null,"Normally you will also want to associate ",(0,i.kt)("inlineCode",{parentName:"p"},"page")," with a ",(0,i.kt)("inlineCode",{parentName:"p"},"route"),", otherwise it won't be accessible in the app."),(0,i.kt)("h3",{id:"fields-1"},"Fields"),(0,i.kt)("h4",{id:"component-clientimport-required"},(0,i.kt)("inlineCode",{parentName:"h4"},"component: ClientImport")," (required)"),(0,i.kt)("p",null,"Import statement of the React element that implements the page component."),(0,i.kt)("h4",{id:"authrequired-bool-optional"},(0,i.kt)("inlineCode",{parentName:"h4"},"authRequired: bool")," (optional)"),(0,i.kt)("p",null,"Can be specified only if ",(0,i.kt)("a",{parentName:"p",href:"/docs/language/features#authentication--authorization"},(0,i.kt)("inlineCode",{parentName:"a"},"app.auth"))," is defined."),(0,i.kt)("p",null,"If set to ",(0,i.kt)("inlineCode",{parentName:"p"},"true"),", only authenticated users will be able to access this page. Unauthenticated users will be redirected to a route defined by ",(0,i.kt)("inlineCode",{parentName:"p"},"onAuthFailedRedirectTo")," property within ",(0,i.kt)("inlineCode",{parentName:"p"},"app.auth"),"."),(0,i.kt)("p",null,"If ",(0,i.kt)("inlineCode",{parentName:"p"},"authRequired")," is set to ",(0,i.kt)("inlineCode",{parentName:"p"},"true"),", the React component of a page (specified by ",(0,i.kt)("inlineCode",{parentName:"p"},"component")," property) will be provided ",(0,i.kt)("inlineCode",{parentName:"p"},"user")," object as a prop."),(0,i.kt)("p",null,"Check out this ",(0,i.kt)("a",{parentName:"p",href:"/docs/tutorial/auth#update-the-main-page-to-require-auth"},"section of our Todo app tutorial")," for an example of usage."),(0,i.kt)("h2",{id:"route"},"Route"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"route")," declaration provides top-level routing functionality in Wasp."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-wasp"},'route AboutRoute { path: "/about", to: AboutPage }\n')),(0,i.kt)("h3",{id:"fields-2"},"Fields"),(0,i.kt)("h4",{id:"path-string-required"},(0,i.kt)("inlineCode",{parentName:"h4"},"path: string")," (required)"),(0,i.kt)("p",null,"URL path of the route. Route path can be parametrised and follows the same conventions as\n",(0,i.kt)("a",{parentName:"p",href:"https://reactrouter.com/web/"},"React Router"),"."),(0,i.kt)("h4",{id:"to-page-required"},(0,i.kt)("inlineCode",{parentName:"h4"},"to: page")," (required)"),(0,i.kt)("p",null,"Name of the ",(0,i.kt)("inlineCode",{parentName:"p"},"page")," to which the path will lead.\nReferenced page must be defined somewhere in ",(0,i.kt)("inlineCode",{parentName:"p"},".wasp")," file."),(0,i.kt)("h3",{id:"example---parametrised-url-path"},"Example - parametrised URL path"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-wasp"},'route TaskRoute { path: "/task/:id", to: TaskPage }\n')),(0,i.kt)("p",null,"For details on URL path format check ",(0,i.kt)("a",{parentName:"p",href:"https://reactrouter.com/web/"},"React Router"),"\ndocumentation."),(0,i.kt)("h3",{id:"accessing-route-parameters-in-a-page-component"},"Accessing route parameters in a page component"),(0,i.kt)("p",null,"Since Wasp under the hood generates code with ",(0,i.kt)("a",{parentName:"p",href:"https://reactrouter.com/web/"},"React Router"),",\nthe same rules apply when accessing URL params in your React components. Here is an example just to get you\nstarted:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-wasp",metastring:'title="todoApp.wasp"',title:'"todoApp.wasp"'},'// ...\nroute TaskRoute { path: "/task/:id", to: TaskPage }\npage TaskPage {\n  component: import Task from "@client/pages/Task"\n}\n')),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:'title="pages/Task.js"',title:'"pages/Task.js"'},"import React from 'react'\n\nconst Task = (props) => {\n  return (\n    <div>\n      I am showing a task with id: {props.match.params.id}.\n    </div>\n  )\n}\n\nexport default Task\n")),(0,i.kt)("h3",{id:"navigating-between-routes"},"Navigating between routes"),(0,i.kt)("p",null,"Navigation can be performed from the React code via ",(0,i.kt)("inlineCode",{parentName:"p"},"<Link/>")," component, also using the functionality of\n",(0,i.kt)("a",{parentName:"p",href:"https://reactrouter.com/web/"},"React Router"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-wasp",metastring:'title="todoApp.wasp"',title:'"todoApp.wasp"'},'// ...\nroute HomeRoute { path: "/home", to: HomePage }\npage HomePage {\n  component: import Home from "@client/pages/Home"\n}\n')),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:'title="src/client/pages/OtherPage.js"',title:'"src/client/pages/OtherPage.js"'},'import React from \'react\'\nimport { Link } from "react-router-dom"\n\nconst OtherPage = (props) => {\n  return (\n    <Link to="/home">Go to homepage</Link>\n  )\n}\n')),(0,i.kt)("h2",{id:"entity"},"Entity"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"entity")," declaration represents a database model.\nWasp uses ",(0,i.kt)("a",{parentName:"p",href:"https://www.prisma.io/"},"Prisma")," to implement database functionality and currently provides only a thin layer above it."),(0,i.kt)("p",null,"Each ",(0,i.kt)("inlineCode",{parentName:"p"},"Entity")," declaration corresponds 1-to-1 to Prisma data model and is defined in a following way:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-wasp"},"entity Task {=psl\n    id          Int     @id @default(autoincrement())\n    description String\n    isDone      Boolean @default(false)\npsl=}\n")),(0,i.kt)("h3",{id:"psl--psl-psl"},(0,i.kt)("inlineCode",{parentName:"h3"},"{=psl ... psl=}: PSL")),(0,i.kt)("p",null,"Definition of entity fields in ",(0,i.kt)("em",{parentName:"p"},"Prisma Schema Language")," (PSL). See\n",(0,i.kt)("a",{parentName:"p",href:"https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-schema"},"here for intro and examples"),"\nand ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/prisma/specs/tree/master/schema"},"here for a more exhaustive language specification"),"."),(0,i.kt)("h3",{id:"using-entities"},"Using Entities"),(0,i.kt)("p",null,"Entity-system in Wasp is based on ",(0,i.kt)("a",{parentName:"p",href:"http://www.prisma.io"},"Prisma"),", and currently Wasp provides only a thin layer\non top of it. The workflow is as follows:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Wasp developer creates/updates some of the entities in ",(0,i.kt)("inlineCode",{parentName:"li"},".wasp")," file."),(0,i.kt)("li",{parentName:"ol"},"Wasp developer runs ",(0,i.kt)("inlineCode",{parentName:"li"},"wasp db migrate-dev"),"."),(0,i.kt)("li",{parentName:"ol"},"Migration data is generated in ",(0,i.kt)("inlineCode",{parentName:"li"},"migrations/")," folder (and should be committed)."),(0,i.kt)("li",{parentName:"ol"},"Wasp developer uses Prisma JS API to work with the database when in Operations.")),(0,i.kt)("h4",{id:"using-entities-in-operations"},"Using Entities in Operations"),(0,i.kt)("p",null,"Most of the time in Wasp you will be working with entities in the context of Operations (Queries & Actions), so check their part of docs for more info on how to use entities in Operations."),(0,i.kt)("h4",{id:"using-entities-directly"},"Using Entities directly"),(0,i.kt)("p",null,"If needed, you can also interact with entities directly via [Prisma Client(",(0,i.kt)("a",{parentName:"p",href:"https://www.prisma.io/docs/concepts/components/prisma-client/crud"},"https://www.prisma.io/docs/concepts/components/prisma-client/crud"),") (although we recommend using them via injected ",(0,i.kt)("inlineCode",{parentName:"p"},"entities")," when in Operations)."),(0,i.kt)("p",null,"To import Prisma Client in your Wasp server code, do ",(0,i.kt)("inlineCode",{parentName:"p"},"import prismaClient from '@wasp/dbClient'"),"."),(0,i.kt)("h2",{id:"queries-and-actions-aka-operations"},"Queries and Actions (aka Operations)"),(0,i.kt)("p",null,"In Wasp, the client and the server interact with each other through Operations.\nWasp currently supports two kinds of Operations: ",(0,i.kt)("strong",{parentName:"p"},"Queries")," and ",(0,i.kt)("strong",{parentName:"p"},"Actions"),"."),(0,i.kt)("h3",{id:"query"},"Query"),(0,i.kt)("p",null,"Queries are used to fetch data from the server. They do not modify the server's state."),(0,i.kt)("p",null,"Queries are implemented in NodeJS and executed within the server's context.\nWasp generates the code that lets you call the Query from anywhere in your code (client or server) using the same interface.\nIn other words, you won't have to worry about building an HTTP API for the Query, handling the request on the server, or even handling and caching the responses on the client.\nInstead, simply focus on the business logic inside your Query and let Wasp take care of the rest!"),(0,i.kt)("p",null,"To create a Wasp Query, you must:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Define the Query's NodeJS implementation"),(0,i.kt)("li",{parentName:"ol"},"Declare the Query in Wasp using the ",(0,i.kt)("inlineCode",{parentName:"li"},"query")," declaration")),(0,i.kt)("p",null,"After completing these two steps, you'll be able to use the Query from any point in your code."),(0,i.kt)("h4",{id:"defining-the-querys-nodejs-implementation"},"Defining the Query's NodeJS implementation"),(0,i.kt)("p",null,"The Query's implementation is a NodeJS function that takes two arguments (it can be an ",(0,i.kt)("inlineCode",{parentName:"p"},"async")," function but doesn't have to).\nSince both arguments are positional, you can name the parameters however you want, but we'll stick with ",(0,i.kt)("inlineCode",{parentName:"p"},"args")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"context"),":"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("inlineCode",{parentName:"li"},"args"),":  An object containing all the arguments (i.e., payload) ",(0,i.kt)("strong",{parentName:"li"},"passed to the Query by the caller")," (e.g., filtering conditions).\nTake a look at ",(0,i.kt)("a",{parentName:"li",href:"#using-the-query"},"the examples of usage")," to see how to pass this object to the Query."),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("inlineCode",{parentName:"li"},"context"),": An additional context object ",(0,i.kt)("strong",{parentName:"li"},"injected into the Query by Wasp"),". This object contains user session information, as well as information about entities. The examples here won't use the context for simplicity purposes. You can read more about it in the ",(0,i.kt)("a",{parentName:"li",href:"#using-entities-in-queries"},"section about using entities in queries"),".")),(0,i.kt)("p",null,"Here's an example of three simple Queries:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="src/server/queries.js"',title:'"src/server/queries.js"'},'// our "database"\nconst tasks = [\n  { id: 1, description: "Buy some eggs", isDone: true },\n  { id: 2, description: "Make an omelette", isDone: false },\n  { id: 3, description: "Eat breakfast", isDone: false }\n]\n\n// You don\'t need to use the arguments if you don\'t need them\nexport const getAllTasks = () => {\n  return tasks;\n}\n\n// The \'args\' object is something sent by the caller (most often from the client)\nexport const getFilteredTasks = (args) => {\n  const { isDone } = args;\n  return tasks.filter(task => task.isDone === isDone)\n}\n\n// Query implementations can be async functions and use await.\nexport const getTasksWithDelay = async () => {\n  const result = await sleep(1000)\n  return tasks\n}\n')),(0,i.kt)("h4",{id:"declaring-a-query-in-wasp"},"Declaring a Query in Wasp"),(0,i.kt)("p",null,"After implementing your Queries in NodeJS, all that's left to do before using them is tell Wasp about it!\nYou can easily do this with the ",(0,i.kt)("inlineCode",{parentName:"p"},"query")," declaration, which supports the following fields:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"fn: ServerImport")," (required) - The import statement of the Query's NodeJs implementation."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"entities: [Entity]")," (optional) - A list of entities you wish to use inside your Query.\nWe'll leave this option aside for now. You can read more about it ",(0,i.kt)("a",{parentName:"li",href:"#using-entities-in-queries"},"here"),".")),(0,i.kt)("p",null,"Wasp Queries and their implementations don't need to (but can) have the same name, so we will keep the names different to avoid confusion.\nWith that in mind, this is how you might declare the Queries that use the implementations from the previous step:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-wasp",metastring:'title="pages/main.wasp"',title:'"pages/main.wasp"'},'// ...\n\n// Again, it most likely makes sense to name the Wasp Query after\n// its implementation. We\'re changing the name to emphasize the difference.\n\nquery fetchAllTasks {\n  fn: import { getAllTasks } from "@server/queries.js"\n}\n\nquery fetchFilteredTasks {\n  fn: import { getFilteredTasks } from "@server/queries.js"\n}\n')),(0,i.kt)("p",null,"After declaring a NodeJS function as a Wasp Query, two crucial things happen:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Wasp ",(0,i.kt)("strong",{parentName:"li"},"generates a client-side JavaScript function")," that shares its name with the Query (e.g., ",(0,i.kt)("inlineCode",{parentName:"li"},"fetchFilteredTasks"),").\nThis function takes a single optional argument - an object containing any serializable data you wish to use inside the Query.\nWasp will pass this object to the Query's implementation as its first positional argument (i.e., ",(0,i.kt)("inlineCode",{parentName:"li"},"args")," from the previous step).\nSuch an abstraction works thanks to an HTTP API route handler Wasp generates on the server, which calls the Query's NodeJS implementation under the hood."),(0,i.kt)("li",{parentName:"ul"},"Wasp ",(0,i.kt)("strong",{parentName:"li"},"generates a server-side NodeJS function")," that shares its name with the Query. This function's interface is identical to the client-side function from the previous point.")),(0,i.kt)("p",null,"Generating two such functions ensures a uniform calling interface across the entire app (both client and server)."),(0,i.kt)("h4",{id:"using-the-query"},"Using the Query"),(0,i.kt)("p",null,"To use the Query, you can import it from ",(0,i.kt)("inlineCode",{parentName:"p"},"@wasp")," and call it directly. As mentioned, the usage is the same regardless of whether you're on the server or the client:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"import fetchAllTasks from '@wasp/queries/fetchAllTasks.js'\nimport fetchFilteredTasks from '@wasp/queries/fetchFilteredTasks.js'\n\n// ...\n\nconst allTasks = await fetchAllTasks();\nconst doneTasks = await fetchFilteredTasks({isDone: true})\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"NOTE"),": Wasp will not stop you from importing a Query's NodeJS implementation from ",(0,i.kt)("inlineCode",{parentName:"p"},"./queries.js")," and calling it directly. However, we advise against this, as you'll lose all the useful features a Wasp Query provides (e.g., entity injection)."),(0,i.kt)("h4",{id:"the-usequery-hook"},"The ",(0,i.kt)("inlineCode",{parentName:"h4"},"useQuery")," hook"),(0,i.kt)("p",null,"When using Queries on the client, you can make them reactive with the help of the ",(0,i.kt)("inlineCode",{parentName:"p"},"useQuery")," hook.\nThis hook comes bundled with Wasp and is a thin wrapper around the ",(0,i.kt)("inlineCode",{parentName:"p"},"useQuery")," hook from ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/tannerlinsley/react-query"},(0,i.kt)("em",{parentName:"a"},"react-query")),"."),(0,i.kt)("p",null,"Wasp's ",(0,i.kt)("inlineCode",{parentName:"p"},"useQuery")," hook accepts three arguments:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"queryFn")," (required): A Wasp query declared in the previous step or, in other words, the client-side query function generated by Wasp based on a ",(0,i.kt)("inlineCode",{parentName:"li"},"query")," declaration."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"queryFnArgs")," (optional): The arguments object (payload) you wish to pass into the Query. The Query's NodeJS implementation will receive this object as its first positional argument."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"options")," (optional): A ",(0,i.kt)("em",{parentName:"li"},"react-query")," ",(0,i.kt)("inlineCode",{parentName:"li"},"options")," object. Use this to change\n",(0,i.kt)("a",{parentName:"li",href:"https://react-query.tanstack.com/guides/important-defaults"},"the default\nbehaviour")," for\nthis particular query. If you want to change the global defaults, you can do\nso in the ",(0,i.kt)("a",{parentName:"li",href:"#overriding-default-behaviour-for-queries"},"client setup function"),".")),(0,i.kt)("p",null,"Wasp's ",(0,i.kt)("inlineCode",{parentName:"p"},"useQuery")," hook behaves mostly the same as ",(0,i.kt)("a",{parentName:"p",href:"https://react-query.tanstack.com/docs/api#usequery"},(0,i.kt)("em",{parentName:"a"},"react-query"),"'s ",(0,i.kt)("inlineCode",{parentName:"a"},"useQuery")," hook"),", the only difference being in not having to supply the key (Wasp does this automatically under the hood)."),(0,i.kt)("p",null,"Here's an example of calling the Queries using the ",(0,i.kt)("inlineCode",{parentName:"p"},"useQuery")," hook:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx"},"import React from 'react'\nimport { useQuery } from '@wasp/queries'\n\nimport fetchAllTasks from '@wasp/queries/fetchAllTasks'\nimport fetchFilteredTasks from '@wasp/queries/fetchFilteredTasks'\n\nconst MainPage = () => {\n  const {\n    data: allTasks,\n    error: error1\n  } = useQuery(fetchAllTasks)\n\n  const {\n    data: doneTasks,\n    error: error2\n  } = useQuery(fetchFilteredTasks, { isDone: true })\n\n  return (\n    <div>\n        <h2>All Tasks</h2>\n        {allTasks ? allTasks.map(task => <Task key={task.id} {...task}/>) : error1}\n\n        <h2>Finished Tasks</h2>\n        {doneTasks ? doneTasks.map(task => <Task key={task.id} {...task}/>) : error2}\n    </div>\n  )\n}\n\nconst Task = ({ description, isDone }) => {\n  return (\n    <div>\n        <p><strong>Description: </strong>{ description }</p>\n        <p><strong>Is done: </strong>{ isDone ? 'Yes' : 'No' }</p>\n    </div>\n  )\n}\n\n\nexport default MainPage\n")),(0,i.kt)("h4",{id:"error-handling"},"Error Handling"),(0,i.kt)("p",null,"For security reasons, all exceptions thrown in the Query's NodeJS implementation are sent to the client as responses with the HTTP status code ",(0,i.kt)("inlineCode",{parentName:"p"},"500"),", with all other details removed.\nHiding error details by default helps against accidentally leaking possibly sensitive information over the network."),(0,i.kt)("p",null,"If you do want to pass additional error information to the client, you can construct and throw an appropriate ",(0,i.kt)("inlineCode",{parentName:"p"},"HttpError")," in your NodeJS Query function:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js",metastring:"title=src/server/queries.js",title:"src/server/queries.js"},"import HttpError from '@wasp/core/HttpError.js'\n\nexport const getTasks = async (args, context) => {\n  const statusCode = 403\n  const message = 'You can\\'t do this!'\n  const data = { foo: 'bar' }\n  throw new HttpError(statusCode, message, data)\n}\n")),(0,i.kt)("p",null,"If the status code is ",(0,i.kt)("inlineCode",{parentName:"p"},"4xx"),", the client will receive a response object with the corresponding ",(0,i.kt)("inlineCode",{parentName:"p"},".message")," and ",(0,i.kt)("inlineCode",{parentName:"p"},".data")," fields and rethrow the error (with these fields included).\nTo prevent information leakage, the server won't forward these fields for any other HTTP status codes."),(0,i.kt)("h4",{id:"using-entities-in-queries"},"Using Entities in Queries"),(0,i.kt)("p",null,"In most cases, resources used in Queries will be ",(0,i.kt)("a",{parentName:"p",href:"#entity"},"Entities"),".\nTo use an Entity in your Query, add it to the query declaration in Wasp:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-wasp",metastring:'{4,9} title="main.wasp"',"{4,9}":!0,title:'"main.wasp"'},'\nquery fetchAllTasks {\n  fn: import { getAllTasks } from "@server/queries.js",\n  entities: [Task]\n}\n\nquery fetchFilteredTasks {\n  fn: import { getFilteredTasks } from "@server/queries.js",\n  entities: [Task]\n}\n')),(0,i.kt)("p",null,"Wasp will inject the specified Entity into the Query's ",(0,i.kt)("inlineCode",{parentName:"p"},"context")," argument, giving you access to the Entity's Prisma API:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="src/server/queries.js"',title:'"src/server/queries.js"'},"export const getAllTasks = async (args, context) => {\n  return context.entities.Task.findMany({})\n}\n\nexport const getFilteredTasks = async (args, context) => {\n  return context.entities.Task.findMany({\n    where: { isDone: args.isDone }\n  })\n}\n")),(0,i.kt)("p",null,"The object ",(0,i.kt)("inlineCode",{parentName:"p"},"context.entities.Task")," exposes ",(0,i.kt)("inlineCode",{parentName:"p"},"prisma.task")," from ",(0,i.kt)("a",{parentName:"p",href:"https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/crud"},"Prisma's CRUD API"),"."),(0,i.kt)("h3",{id:"action"},"Action"),(0,i.kt)("p",null,"Actions are very similar to Queries. So similar, in fact, we will only list the differences:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"They can (and most often should) modify the server's state, while Queries are only allowed to read it."),(0,i.kt)("li",{parentName:"ol"},"Actions don't need to be reactive so you can call them directly. Still, Wasp does provide a ",(0,i.kt)("inlineCode",{parentName:"li"},"useAction")," React hook for adding extra behavior to the Action (e.g., optimistic updates).\nRead more about the ",(0,i.kt)("a",{parentName:"li",href:"#the-useaction-hook"},(0,i.kt)("inlineCode",{parentName:"a"},"useAction")," hook")," below."),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("inlineCode",{parentName:"li"},"action")," declarations in Wasp are mostly identical to ",(0,i.kt)("inlineCode",{parentName:"li"},"query")," declarations. The only difference is in the declaration's name.")),(0,i.kt)("p",null,"Here's an implementation of a simple Action:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js",metastring:"title=src/server/actions.js",title:"src/server/actions.js"},"export const sayHi = async () => {\n  console.log('The client said Hi!')\n}\n")),(0,i.kt)("p",null,"Its corresponding declaration in Wasp:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-wasp",metastring:'title="main.wasp"',title:'"main.wasp"'},'// ...\n\naction sayHi {\n  fn: import { sayHi } from "@server/actions.js"\n}\n')),(0,i.kt)("p",null,"And an example of how to import and call the declared Action:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"import sayHi from '@wasp/actions/sayHi'\n\n// ...\n\nsayHi()\n")),(0,i.kt)("p",null,"Here's an example on how you might define a less contrived Action."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js",metastring:"title=src/server/actions.js",title:"src/server/actions.js"},"// ...\nexport const updateTaskIsDone = ({ id, isDone }, context) => {\n  return context.entities.Task.update({\n    where: { id },\n    data: { isDone }\n  })\n}\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-wasp",metastring:"title=main.wasp",title:"main.wasp"},'action updateTaskIsDone {\n  fn: import { updateTaskIsDone } from "@server/actions.js",\n  entities: [Task]\n}\n')),(0,i.kt)("p",null,"And here is how you might use it:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"{4,18} title=src/client/pages/Task.js","{4,18}":!0,title:"src/client/pages/Task.js"},"import React from 'react'\nimport { useQuery } from '@wasp/queries'\nimport fetchTask from '@wasp/queries/fetchTask'\nimport updateTaskIsDone from '@wasp/actions/updateTaskIsDone'\n\nconst TaskPage = ({ id }) => {\n  const { data: task } = useQuery(fetchTask, { id })\n\n  if (!task) {\n    return <h1>\"Loading\"</h1>\n  }\n\n  const { description, isDone } = task\n  return (\n    <div>\n      <p><strong>Description: </strong>{description}</p>\n      <p><strong>Is done: </strong>{isDone ? 'Yes' : 'No'}</p>\n      <button onClick={() => updateTaskIsDone({ id, isDone: !isDone })}>\n        Mark as {task.isDone ? 'undone' : 'done'}\n      </button>\n    </div>\n  )\n}\n")),(0,i.kt)("h4",{id:"the-useaction-hook"},"The ",(0,i.kt)("inlineCode",{parentName:"h4"},"useAction")," hook"),(0,i.kt)("p",null,"When using Actions in components, you can enhance them with the help of the ",(0,i.kt)("inlineCode",{parentName:"p"},"useAction")," hook. This hook comes bundled with Wasp and decorates Wasp Actions.\nIn other words, the hook returns a function whose API matches the original Action while also doing something extra under the hood (depending on how you configure it)."),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"useAction")," hook accepts two arguments:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"actionFn")," (required) - The Wasp Action (i.e., the client-side query function generated by Wasp based on a query declaration) you wish to enhance."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"actionOptions")," (optional) - An object configuring the extra features you want to add to the given Action. While this argument is technically optional, there is no point in using the ",(0,i.kt)("inlineCode",{parentName:"li"},"useAction")," hook without providing it (it would be the same as using the Action directly). The Action options object supports the following fields:",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"optimisticUpdates")," (optional) - An array of objects where each object defines an ",(0,i.kt)("a",{parentName:"li",href:"https://stackoverflow.com/a/33009713"},"optimistic update")," to perform on the query cache. To define an optimistic update, you must specify the following properties:",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"getQuerySpecifier")," (required) - A function returning the query specifier (i.e., a value used to address the query you want to update). A query specifier is an array specifying the query function and arguments. For example, to optimistically update the query used with ",(0,i.kt)("inlineCode",{parentName:"li"},"useQuery(fetchFilteredTasks, {isDone: true }]"),", your ",(0,i.kt)("inlineCode",{parentName:"li"},"getQuerySpecifier")," function would have to return the array ",(0,i.kt)("inlineCode",{parentName:"li"},"[fetchFilteredTasks, { isDone: true}]"),". Wasp will forward the argument you pass into the decorated Action to this function (i.e., you can use the properties of the added/change item to address the query)."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"updateQuery")," (required) - The function used to perform the optimistic update. It should return the desired state of the cache. Wasp will call it with the following arguments:",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"item")," - The argument you pass into the decorated Action."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"oldData")," - The currently cached value for the query identified by the specifier.")))))))),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"NOTE:")," The ",(0,i.kt)("inlineCode",{parentName:"p"},"updateQuery")," function must be a pure function. It must return the desired cache value identified by the ",(0,i.kt)("inlineCode",{parentName:"p"},"getQuerySpecifier")," function and ",(0,i.kt)("em",{parentName:"p"},"must not")," perform any side effects. Also, make sure you only update the query caches affected by your action causing the optimistic update (Wasp cannot yet verify this). Finally, your implementation of the ",(0,i.kt)("inlineCode",{parentName:"p"},"updateQuery")," function should work correctly regardless of the state of ",(0,i.kt)("inlineCode",{parentName:"p"},"oldData")," (e.g., don't rely on array positioning). If you need to do something else during your optimistic update, you can directly use ",(0,i.kt)("em",{parentName:"p"},"react-query"),"'s lower-level API (read more about it ",(0,i.kt)("a",{parentName:"p",href:"#advanced-usage"},"here"),")."),(0,i.kt)("p",null,"Here's an example showing how to configure the Action from the previous example to perform an optimistic update:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"{3,9,10,11,12,13,14,15,16,27} title=src/client/pages/Task.js","{3,9,10,11,12,13,14,15,16,27}":!0,title:"src/client/pages/Task.js"},"import React from 'react'\nimport { useQuery } from '@wasp/queries'\nimport { useAction } from '@wasp/actions'\nimport fetchTask from '@wasp/queries/fetchTask'\nimport updateTaskIsDone from '@wasp/actions/updateTaskIsDone'\n\nconst TaskPage = ({ id }) => {\n  const { data: task } = useQuery(fetchTask, { id })\n  const updateTaskIsDoneOptimistically = useAction(updateTaskIsDone, {\n    optimisticUpdates: [\n      {\n        getQuerySpecifier: ({ id }) => [fetchTask, { id }],\n        updateQuery: ({ isDone }, oldData) => ({ ...oldData, isDone })\n      }\n    ]\n  })\n\n  if (!task) {\n    return <h1>\"Loading\"</h1>\n  }\n\n  const { description, isDone } = task\n  return (\n    <div>\n      <p><strong>Description: </strong>{description}</p>\n      <p><strong>Is done: </strong>{isDone ? 'Yes' : 'No'}</p>\n      <button onClick={() => updateTaskIsDoneOptimistically({ id, isDone: !isDone })}>\n        Mark as {task.isDone ? 'undone' : 'done'}\n      </button>\n      <div>\n        <Link to=\"/\">Back to main page</Link>\n      </div>\n    </div>\n  )\n}\n\nexport default TaskPage\n")),(0,i.kt)("h4",{id:"advanced-usage"},"Advanced usage"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"useAction")," hook currently only supports specifying optimistic updates. You can expect more features in future versions of Wasp."),(0,i.kt)("p",null,"Wasp's optimistic update API is deliberately small and focuses exclusively on updating Query caches (as that's the most common use case). You might need an API that offers more options or a higher level of control. If that's the case, instead of using Wasp's ",(0,i.kt)("inlineCode",{parentName:"p"},"useAction")," hook, you can use ",(0,i.kt)("em",{parentName:"p"},"react-query"),"'s ",(0,i.kt)("inlineCode",{parentName:"p"},"useMutation")," hook and directly work with ",(0,i.kt)("a",{parentName:"p",href:"https://tanstack.com/query/v4/docs/guides/optimistic-updates?from=reactQueryV3&original=https://react-query-v3.tanstack.com/guides/optimistic-updates"},"their low-level API"),"."),(0,i.kt)("p",null,"If you decide to use ",(0,i.kt)("em",{parentName:"p"},"react-query"),"'s API directly, you will need access to the Query's cache key. Wasp internally uses this key but abstracts it from the programmer. Still, you can easily obtain it by accessing the ",(0,i.kt)("inlineCode",{parentName:"p"},"queryCacheKey")," property on a Query:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"import { fetchTasks } from '@wasp/queries'\n\nconst queryKey = fetchTasks.queryCacheKey\n")),(0,i.kt)("h3",{id:"cache-invalidation"},"Cache Invalidation"),(0,i.kt)("p",null,"One of the trickiest parts of managing a web app's state is making sure the data returned by the queries is up to date.\nSince Wasp uses ",(0,i.kt)("em",{parentName:"p"},"react-query")," for Query management, we must make sure to invalidate Queries (more specifically, their cached results managed by ",(0,i.kt)("em",{parentName:"p"},"react-query"),") whenever they become stale."),(0,i.kt)("p",null,"It's possible to invalidate the caches manually through several mechanisms ",(0,i.kt)("em",{parentName:"p"},"react-query")," provides (e.g., refetch, direct invalidation).\nHowever, since manual cache invalidation quickly becomes complex and error-prone, Wasp offers a quicker and a more effective solution to get you started: ",(0,i.kt)("strong",{parentName:"p"},"automatic Entity-based Query cache invalidation"),".\nBecause Actions can (and most often do) modify the state while Queries read it, Wasp invalidates a Query's cache whenever an Action that uses the same Entity is executed."),(0,i.kt)("p",null,"For example, let's assume that Action ",(0,i.kt)("inlineCode",{parentName:"p"},"createTask")," and Query ",(0,i.kt)("inlineCode",{parentName:"p"},"getTasks")," both use Entity ",(0,i.kt)("inlineCode",{parentName:"p"},"Task"),". If ",(0,i.kt)("inlineCode",{parentName:"p"},"createTask")," is executed, ",(0,i.kt)("inlineCode",{parentName:"p"},"getTasks"),"'s cached result may no longer be up-to-date.\nWasp will therefore invalidate it, making ",(0,i.kt)("inlineCode",{parentName:"p"},"getTasks")," refetch data from the server, bringing it up to date again."),(0,i.kt)("p",null,'In practice, this means that Wasp keeps the queries "fresh" without requiring you to think about cache invalidation.'),(0,i.kt)("p",null,"On the other hand, this kind of automatic cache invalidation can become wasteful (some updates might not be necessary) and will only work for Entities. If that's an issue, you can use the mechanisms provided by ",(0,i.kt)("em",{parentName:"p"},"react-query")," for now, and expect more direct support in Wasp for handling those use cases in a nice, elegant way."),(0,i.kt)("p",null,"If you wish to optimistically set cache values after performing an action, you can do so using ",(0,i.kt)("a",{parentName:"p",href:"https://stackoverflow.com/a/33009713"},"optimistic updates"),". Configure them using Wasp's ",(0,i.kt)("a",{parentName:"p",href:"#the-useaction-hook"},"useAction hook"),". This is currently the only manual cache invalidation mechanism Wasps supports natively. For everything else, you can always rely on ",(0,i.kt)("em",{parentName:"p"},"react-query"),"."),(0,i.kt)("h3",{id:"prisma-error-helpers"},"Prisma Error Helpers"),(0,i.kt)("p",null,"In your Operations, you may wish to handle general Prisma errors with HTTP-friendly responses. We have exposed two helper functions, ",(0,i.kt)("inlineCode",{parentName:"p"},"isPrismaError"),", and ",(0,i.kt)("inlineCode",{parentName:"p"},"prismaErrorToHttpError"),", for this purpose. As of now, we convert two specific Prisma errors (which we will continue to expand), with the rest being ",(0,i.kt)("inlineCode",{parentName:"p"},"500"),". See the ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/wasp-lang/wasp/blob/main/waspc/e2e-test/test-outputs/waspMigrate-golden/waspMigrate/.wasp/out/server/src/utils.js"},"source here"),"."),(0,i.kt)("h4",{id:"import-statement"},(0,i.kt)("inlineCode",{parentName:"h4"},"import statement"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"import { isPrismaError, prismaErrorToHttpError } from '@wasp/utils.js'\n")),(0,i.kt)("h5",{id:"example-of-usage"},"Example of usage:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"try {\n  await context.entities.Task.create({...})\n} catch (e) {\n  if (isPrismaError(e)) {\n    throw prismaErrorToHttpError(e)\n  } else {\n    throw e\n  }\n}\n")),(0,i.kt)("h3",{id:"crud-operations-on-top-of-entities"},"CRUD operations on top of entities"),(0,i.kt)("admonition",{title:"Early preview",type:"caution"},(0,i.kt)("p",{parentName:"admonition"},"This feature is currently in early preview. It doesn't contain all the planned features."),(0,i.kt)("p",{parentName:"admonition"},"In the future iterations of Wasp we plan on supporting:"),(0,i.kt)("ul",{parentName:"admonition"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"authorization")," that will allow you to specify which users can perform which operations"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"validation")," of input data (e.g. using Zod schema validation)"))),(0,i.kt)("p",null,"For a specific ",(0,i.kt)("a",{parentName:"p",href:"/docs/language/features#entity"},"Entity"),", you can tell Wasp to automatically instantiate server-side logic (",(0,i.kt)("a",{parentName:"p",href:"/docs/language/features#query"},"Queries")," and ",(0,i.kt)("a",{parentName:"p",href:"/docs/language/features#action"},"Actions"),") for creating, reading, updating and deleting such entities."),(0,i.kt)("h4",{id:"which-operations-are-supported"},"Which operations are supported?"),(0,i.kt)("p",null,"If we create CRUD operations for an entity named ",(0,i.kt)("inlineCode",{parentName:"p"},"Task"),","),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-wasp",metastring:'title="main.wasp"',title:'"main.wasp"'},'crud Tasks { // crud name here is "Tasks"\n  entity: Task,\n  operations: {\n    getAll: {\n      isPublic: true, // optional, defaults to false\n    },\n    get: {},\n    create: {\n      overrideFn: import { createTask } from "@server/tasks.js", // optional\n    },\n    update: {},\n  },\n}\n')),(0,i.kt)("p",null,"Wasp will give you the following default implementations:"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"getAll")," - returns all entities"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"// ...\n\n// If the operation is not public, Wasp checks if an authenticated user\n// is making the request.\n\nreturn Task.findMany()\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"get")," - returns one entity by id field"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"// ...\n// Wasp uses the field marked with `@id` in Prisma schema as the id field.\nreturn Task.findUnique({ where: { id: args.id } })\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"create")," - creates a new entity"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"// ...\nreturn Task.create({ data: args.data })\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"update")," - updates an existing entity"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"// ...\n// Wasp uses the field marked with `@id` in Prisma schema as the id field.\nreturn Task.update({ where: { id: args.id }, data: args.data })\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"delete")," - deletes an existing entity"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"// ...\n// Wasp uses the field marked with `@id` in Prisma schema as the id field.\nreturn Task.delete({ where: { id: args.id } })\n")),(0,i.kt)("admonition",{title:"Current Limitations",type:"info"},(0,i.kt)("p",{parentName:"admonition"},"In the default ",(0,i.kt)("inlineCode",{parentName:"p"},"create")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"update")," implementations, we are saving all of the data that the client sends to the server. This is not always desirable, i.e. in the case when the client should not be able to modify all of the data in the entity."),(0,i.kt)("p",{parentName:"admonition"},(0,i.kt)("a",{parentName:"p",href:"#/docs/guides/crud#future-of-crud-operations-in-wasp"},"In the future"),", we are planning to add validation of action input, where only the data that the user is allowed to change will be saved. "),(0,i.kt)("p",{parentName:"admonition"},"For now, the solution is to provide an override function. You can override the default implementation by using the ",(0,i.kt)("inlineCode",{parentName:"p"},"overrideFn")," option and implementing the validation logic yourself.")),(0,i.kt)("h4",{id:"crud-declaration"},"CRUD declaration"),(0,i.kt)("p",null,"The CRUD declaration works on top of an existing entity declaration. It is declared as follows:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-wasp",metastring:'title="main.wasp"',title:'"main.wasp"'},'crud Tasks { // crud name here is "Tasks"\n  entity: Task,\n  operations: {\n    getAll: {\n      isPublic: true, // optional, defaults to false\n    },\n    get: {},\n    create: {\n      overrideFn: import { createTask } from "@server/tasks.js", // optional\n    },\n    update: {},\n  },\n}\n')),(0,i.kt)("p",null,"It has the following fields:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"entity: Entity")," - the entity to which the CRUD operations will be applied."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"operations: { [operationName]: CrudOperationOptions }")," - the operations to be generated. The key is the name of the operation, and the value is the operation configuration.",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"The possible values for ",(0,i.kt)("inlineCode",{parentName:"li"},"operationName")," are:",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"getAll")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"get")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"create")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"update")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"delete")))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"CrudOperationOptions")," can have the following fields:",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"isPublic: bool")," - Whether the operation is public or not. If it is public, no auth is required to access it. If it is not public, it will be available only to authenticated users. Defaults to ",(0,i.kt)("inlineCode",{parentName:"li"},"false"),"."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"overrideFn: ServerImport")," - The import statement of the optional override implementation in Node.js.")))))),(0,i.kt)("h4",{id:"defining-the-overrides"},"Defining the overrides"),(0,i.kt)("p",null,"Like with actions and queries, you can define the implementation in a Javascript/Typescript file. The overrides are functions that take the following arguments:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"args")," - The arguments of the operation i.e. the data that's sent from the client."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"context")," - Context contains the ",(0,i.kt)("inlineCode",{parentName:"li"},"user")," making the request and the ",(0,i.kt)("inlineCode",{parentName:"li"},"entities")," object containing the entity that's being operated on.")),(0,i.kt)("p",null,"You can also import types for each of the functions you want to override from ",(0,i.kt)("inlineCode",{parentName:"p"},"@wasp/crud/{crud name}"),". The available types are:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"GetAllQuery")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"GetQuery")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"CreateAction")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"UpdateAction")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"DeleteAction"))),(0,i.kt)("p",null,"If you have a CRUD named ",(0,i.kt)("inlineCode",{parentName:"p"},"Tasks"),", you would import the types like this:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"import type { GetAllQuery, GetQuery, CreateAction, UpdateAction, DeleteAction } from '@wasp/crud/Tasks'\n\n// Each of the types is a generic type, so you can use it like this:\nexport const getAllOverride: GetAllQuery<Input, Output> = async (args, context) => {\n  // ...\n}\n")),(0,i.kt)("p",null,"We are showing an example of an override in the ",(0,i.kt)("a",{parentName:"p",href:"/docs/guides/crud"},"CRUD guide"),"."),(0,i.kt)("h4",{id:"using-the-crud-operations-in-client-code"},"Using the CRUD operations in client code"),(0,i.kt)("p",null,"On the client, you import the CRUD operations from ",(0,i.kt)("inlineCode",{parentName:"p"},"@wasp/crud/{crud name}"),". The names of the imports are the same as the names of the operations. For example, if you have a CRUD called ",(0,i.kt)("inlineCode",{parentName:"p"},"Tasks"),", you would import the operations like this:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:'title="SomePage.jsx"',title:'"SomePage.jsx"'},"import { Tasks } from '@wasp/crud/Tasks'\n")),(0,i.kt)("p",null,"You can then access the operations like this:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:'title="SomePage.jsx"',title:'"SomePage.jsx"'},"const { data } = Tasks.getAll.useQuery()\nconst { data } = Tasks.get.useQuery({ id: 1 })\nconst createAction = Tasks.create.useAction()\nconst updateAction = Tasks.update.useAction()\nconst deleteAction = Tasks.delete.useAction()\n\n// The CRUD operations are using the existing actions and queries\n// under the hood, so all the options are available as before.\n")),(0,i.kt)("p",null,"Check out the ",(0,i.kt)("a",{parentName:"p",href:"/docs/guides/crud"},"CRUD guide")," to see how to use the CRUD operations in client code."),(0,i.kt)("h2",{id:"apis"},"APIs"),(0,i.kt)("p",null,"In Wasp, the default client-server interaction mechanism is through ",(0,i.kt)("a",{parentName:"p",href:"#queries-and-actions-aka-operations"},"Operations"),". However, if you need a specific URL method/path, or a specific response, Operations may not be suitable for you. For these cases, you can use an ",(0,i.kt)("inlineCode",{parentName:"p"},"api"),"! Best of all, they should look and feel very familiar."),(0,i.kt)("h3",{id:"api"},"API"),(0,i.kt)("p",null,"APIs are used to tie a JS function to an HTTP (method, path) pair. They are distinct from Operations and have no client-side helpers (like ",(0,i.kt)("inlineCode",{parentName:"p"},"useQuery"),")."),(0,i.kt)("p",null,"To create a Wasp API, you must:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Define the APIs NodeJS implementation"),(0,i.kt)("li",{parentName:"ol"},"Declare the API in Wasp using the ",(0,i.kt)("inlineCode",{parentName:"li"},"api")," declaration")),(0,i.kt)("p",null,"After completing these two steps, you'll be able to call the API from client code (via our Axios wrapper), or from the outside world."),(0,i.kt)("admonition",{type:"note"},(0,i.kt)("p",{parentName:"admonition"},"In order to leverage the benefits of TypeScript and use types in your NodeJS implementation (step 1), you must add your ",(0,i.kt)("inlineCode",{parentName:"p"},"api")," declarations to your ",(0,i.kt)("inlineCode",{parentName:"p"},".wasp")," file (step 2) ",(0,i.kt)("em",{parentName:"p"},"and")," compile the Wasp project. This will enable the Wasp compiler to generate any new types based on your ",(0,i.kt)("inlineCode",{parentName:"p"},".wasp"),"file definitions for use in your implementation files.")),(0,i.kt)("h4",{id:"defining-the-apis-nodejs-implementation"},"Defining the APIs NodeJS implementation"),(0,i.kt)("p",null,"An API should be implemented as a NodeJS function that takes three arguments."),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("inlineCode",{parentName:"li"},"req"),":  Express Request object"),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("inlineCode",{parentName:"li"},"res"),": Express Response object"),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("inlineCode",{parentName:"li"},"context"),": An additional context object ",(0,i.kt)("strong",{parentName:"li"},"injected into the API by Wasp"),". This object contains user session information, as well as information about entities. The examples here won't use the context for simplicity purposes. You can read more about it in the ",(0,i.kt)("a",{parentName:"li",href:"#using-entities-in-apis"},"section about using entities in APIs"),".")),(0,i.kt)("h5",{id:"simple-api-example"},"Simple API example"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="src/server/apis.ts"',title:'"src/server/apis.ts"'},"import { FooBar } from '@wasp/apis/types'\n\nexport const fooBar : FooBar = (req, res, context) => {\n  res.set('Access-Control-Allow-Origin', '*') // Example of modifying headers to override Wasp default CORS middleware.\n  res.json({ msg: `Hello, ${context.user?.username || \"stranger\"}!` })\n}\n")),(0,i.kt)("h5",{id:"more-complicated-typescript-example"},"More complicated TypeScript example"),(0,i.kt)("p",null,"Let's say you wanted to create some ",(0,i.kt)("inlineCode",{parentName:"p"},"GET"),' route that would take an email address as a param, and provide them the answer to "Life, the Universe and Everything." :) What would this look like in TypeScript?'),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-wasp",metastring:'title="main.wasp"',title:'"main.wasp"'},'api fooBar {\n  fn: import { fooBar } from "@server/apis.js",\n  entities: [Task],\n  httpRoute: (GET, "/foo/bar/:email")\n}\n')),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="src/server/apis.ts"',title:'"src/server/apis.ts"'},"import { FooBar } from '@wasp/apis/types'\n\nexport const fooBar: FooBar<\n{ email: string }, // params\n{ answer: number }  // response\n> = (req, res, _context) => {\n  console.log(req.params.email)\n  res.json({ answer: 42 })\n}\n")),(0,i.kt)("h4",{id:"declaring-an-api-in-wasp"},"Declaring an API in Wasp"),(0,i.kt)("p",null,"After implementing your APIs in NodeJS, all that's left to do before using them is tell Wasp about it!\nYou can easily do this with the ",(0,i.kt)("inlineCode",{parentName:"p"},"api")," declaration, which supports the following fields:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"fn: ServerImport")," (required) - The import statement of the APIs NodeJs implementation."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"httpRoute: (HttpMethod, string)")," (required) - The HTTP (method, path) pair, where the method can be one of:",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"ALL"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"GET"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"POST"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"PUT")," or ",(0,i.kt)("inlineCode",{parentName:"li"},"DELETE")),(0,i.kt)("li",{parentName:"ul"},"and path is an Express path ",(0,i.kt)("inlineCode",{parentName:"li"},"string"),"."))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"entities: [Entity]")," (optional) - A list of entities you wish to use inside your API.\nWe'll leave this option aside for now. You can read more about it ",(0,i.kt)("a",{parentName:"li",href:"#using-entities-in-apis"},"here"),"."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"auth: bool")," (optional) - If auth is enabled, this will default to ",(0,i.kt)("inlineCode",{parentName:"li"},"true")," and provide a ",(0,i.kt)("inlineCode",{parentName:"li"},"context.user")," object. If you do not wish to attempt to parse the JWT in the Authorization Header, you may set this to ",(0,i.kt)("inlineCode",{parentName:"li"},"false"),"."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"middlewareConfigFn: ServerImport")," (optional) - The import statement to an Express middleware config function for this API. See ",(0,i.kt)("a",{parentName:"li",href:"/docs/guides/middleware-customization#2-customize-api-specific-middleware"},"the guide here"),".")),(0,i.kt)("p",null,"Wasp APIs and their implementations don't need to (but can) have the same name. With that in mind, this is how you might declare the API that uses the implementations from the previous step:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-wasp",metastring:'title="pages/main.wasp"',title:'"pages/main.wasp"'},'// ...\n\napi fooBar {\n  fn: import { fooBar } from "@server/apis.js",\n  httpRoute: (GET, "/foo/bar")\n}\n')),(0,i.kt)("h4",{id:"using-the-api"},"Using the API"),(0,i.kt)("p",null,"To use the API externally, you simply call the endpoint using the method and path you used. For example, if your app is running at ",(0,i.kt)("inlineCode",{parentName:"p"},"https://example.com")," then from the above you could issue a ",(0,i.kt)("inlineCode",{parentName:"p"},"GET")," to ",(0,i.kt)("inlineCode",{parentName:"p"},"https://example/com/foo/callback")," (in your browser, Postman, ",(0,i.kt)("inlineCode",{parentName:"p"},"curl"),", another web service, etc.)."),(0,i.kt)("p",null,"To use the API from your client, including with auth support, you can import the Axios wrapper from ",(0,i.kt)("inlineCode",{parentName:"p"},"@wasp/api")," and invoke a call. For example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"import React, { useEffect } from 'react'\nimport api from '@wasp/api'\n\nasync function fetchCustomRoute() {\n  const res = await api.get('/foo/bar')\n  console.log(res.data)\n}\n\nexport const Foo = () => {\n  useEffect(() => {\n    fetchCustomRoute()\n  }, []);\n\n  return (\n    <>\n      // ...\n    </>\n  )\n}\n")),(0,i.kt)("h4",{id:"using-entities-in-apis"},"Using Entities in APIs"),(0,i.kt)("p",null,"In many cases, resources used in APIs will be ",(0,i.kt)("a",{parentName:"p",href:"#entity"},"Entities"),".\nTo use an Entity in your API, add it to the ",(0,i.kt)("inlineCode",{parentName:"p"},"api")," declaration in Wasp:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-wasp",metastring:'{3} title="main.wasp"',"{3}":!0,title:'"main.wasp"'},'api fooBar {\n  fn: import { fooBar } from "@server/apis.js",\n  entities: [Task],\n  httpRoute: (GET, "/foo/bar")\n}\n')),(0,i.kt)("p",null,"Wasp will inject the specified Entity into the APIs ",(0,i.kt)("inlineCode",{parentName:"p"},"context")," argument, giving you access to the Entity's Prisma API:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="src/server/apis.ts"',title:'"src/server/apis.ts"'},"import { FooBar } from '@wasp/apis/types'\n\nexport const fooBar : FooBar = (req, res, context) => {\n  res.json({ count: await context.entities.Task.count() })\n}\n\n")),(0,i.kt)("p",null,"The object ",(0,i.kt)("inlineCode",{parentName:"p"},"context.entities.Task")," exposes ",(0,i.kt)("inlineCode",{parentName:"p"},"prisma.task")," from ",(0,i.kt)("a",{parentName:"p",href:"https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/crud"},"Prisma's CRUD API"),"."),(0,i.kt)("h3",{id:"apinamespace"},"apiNamespace"),(0,i.kt)("p",null,"An ",(0,i.kt)("inlineCode",{parentName:"p"},"apiNamespace")," is a simple declaration used to apply some ",(0,i.kt)("inlineCode",{parentName:"p"},"middlewareConfigFn")," to all APIs under some specific path. For example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-wasp",metastring:'title="main.wasp"',title:'"main.wasp"'},'apiNamespace fooBar {\n  middlewareConfigFn: import { fooBarNamespaceMiddlewareFn } from "@server/apis.js",\n  path: "/foo/bar"\n}\n')),(0,i.kt)("p",null,"For more information about middleware configuration, please see: ",(0,i.kt)("a",{parentName:"p",href:"/docs/guides/middleware-customization"},"Middleware Configuration")),(0,i.kt)("h2",{id:"jobs"},"Jobs"),(0,i.kt)("p",null,"If you have server tasks that you do not want to handle as part of the normal request-response cycle, Wasp allows you to make that function a ",(0,i.kt)("inlineCode",{parentName:"p"},"job"),' and it will gain some "superpowers." Jobs will:'),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"persist between server restarts"),(0,i.kt)("li",{parentName:"ul"},"can be retried if they fail"),(0,i.kt)("li",{parentName:"ul"},"can be delayed until the future"),(0,i.kt)("li",{parentName:"ul"},"can have a recurring schedule!")),(0,i.kt)("p",null,"Some examples where you may want to use a ",(0,i.kt)("inlineCode",{parentName:"p"},"job")," on the server include sending an email, making an HTTP request to some external API, or doing some nightly calculations."),(0,i.kt)("h3",{id:"job-executors"},"Job Executors"),(0,i.kt)("p",null,"Job executors handle the scheduling, monitoring, and execution of our jobs."),(0,i.kt)("p",null,"Wasp allows you to choose which job executor will be used to execute a specific job that you define, which affects some of the finer details of how jobs will behave and how they can be further configured. Each job executor has its pros and cons, which we will explain in more detail below, so you can pick the one that best suits your needs."),(0,i.kt)("p",null,"Currently, Wasp supports only one type of job executor, which is ",(0,i.kt)("inlineCode",{parentName:"p"},"PgBoss"),", but in the future, it will likely support more."),(0,i.kt)("h4",{id:"pg-boss"},"pg-boss"),(0,i.kt)("p",null,"We have selected ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/timgit/pg-boss/"},"pg-boss")," as our first job executor to handle the low-volume, basic job queue workloads many web applications have. By using PostgreSQL (and ",(0,i.kt)("a",{parentName:"p",href:"https://www.2ndquadrant.com/en/blog/what-is-select-skip-locked-for-in-postgresql-9-5/"},"SKIP LOCKED"),") as its storage and synchronization mechanism, it allows us to provide many job queue pros without any additional infrastructure or complex management."),(0,i.kt)("admonition",{type:"info"},(0,i.kt)("p",{parentName:"admonition"},"Keep in mind that pg-boss jobs run alongside your other server-side code, so they are not appropriate for CPU-heavy workloads. Additionally, some care is required if you modify scheduled jobs. Please see pg-boss details below for more information."),(0,i.kt)("details",null,(0,i.kt)("summary",null,"pg-boss details"),(0,i.kt)("p",{parentName:"admonition"},"  pg-boss provides many useful features, which can be found ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/timgit/pg-boss/blob/8.4.2/README.md"},"here"),"."),(0,i.kt)("p",{parentName:"admonition"},"  When you add pg-boss to a Wasp project, it will automatically add a new schema to your database called ",(0,i.kt)("inlineCode",{parentName:"p"},"pgboss")," with some internal tracking tables, including ",(0,i.kt)("inlineCode",{parentName:"p"},"job")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"schedule"),". pg-boss tables have a ",(0,i.kt)("inlineCode",{parentName:"p"},"name")," column in most tables that will correspond to your ",(0,i.kt)("inlineCode",{parentName:"p"},"job")," identifier. Additionally, these tables maintain arguments, states, return values, retry information, start and expiration times, and other metadata required by pg-boss."),(0,i.kt)("p",{parentName:"admonition"},"  If you need to customize the creation of the pg-boss instance, you can set an environment variable called ",(0,i.kt)("inlineCode",{parentName:"p"},"PG_BOSS_NEW_OPTIONS")," to a stringified JSON object containing ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/timgit/pg-boss/blob/8.4.2/docs/readme.md#newoptions"},"these initialization parameters"),". ",(0,i.kt)("strong",{parentName:"p"},"NOTE"),": Setting this overwrites all Wasp defaults, so you must include database connection information as well."),(0,i.kt)("h5",{parentName:"admonition",id:"pg-boss-considerations"},"pg-boss considerations"),(0,i.kt)("ul",{parentName:"admonition"},(0,i.kt)("li",{parentName:"ul"},"Wasp starts pg-boss alongside your web server's application, where both are simultaneously operational. This means that jobs running via pg-boss and the rest of the server logic (like Operations) share the CPU, therefore you should avoid running CPU-intensive tasks via jobs.",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Wasp does not (yet) support independent, horizontal scaling of pg-boss-only applications, nor starting them as separate workers/processes/threads."))),(0,i.kt)("li",{parentName:"ul"},"The job name/identifier in your ",(0,i.kt)("inlineCode",{parentName:"li"},".wasp")," file is the same name that will be used in the ",(0,i.kt)("inlineCode",{parentName:"li"},"name")," column of pg-boss tables. If you change a name that had a ",(0,i.kt)("inlineCode",{parentName:"li"},"schedule")," associated with it, pg-boss will continue scheduling those jobs but they will have no handlers associated, and will thus become stale and expire. To resolve this, you can remove the applicable row from the ",(0,i.kt)("inlineCode",{parentName:"li"},"schedule")," table in the ",(0,i.kt)("inlineCode",{parentName:"li"},"pgboss")," schema of your database.",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"If you remove a ",(0,i.kt)("inlineCode",{parentName:"li"},"schedule")," from a job, you will need to do the above as well."))),(0,i.kt)("li",{parentName:"ul"},"If you wish to deploy to Heroku, you need to set an additional environment variable called ",(0,i.kt)("inlineCode",{parentName:"li"},"PG_BOSS_NEW_OPTIONS")," to ",(0,i.kt)("inlineCode",{parentName:"li"},'{"connectionString":"<REGULAR_HEROKU_DATABASE_URL>","ssl":{"rejectUnauthorized":false}}'),". This is because pg-boss uses the ",(0,i.kt)("inlineCode",{parentName:"li"},"pg")," extension, which does not seem to connect to Heroku over SSL by default, which Heroku requires. Additionally, Heroku uses a self-signed cert, so we must handle that as well."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://devcenter.heroku.com/articles/connecting-heroku-postgres#connecting-in-node-js"},"https://devcenter.heroku.com/articles/connecting-heroku-postgres#connecting-in-node-js"))))),(0,i.kt)("h3",{id:"basic-job-definition-and-usage"},"Basic job definition and usage"),(0,i.kt)("p",null,"To declare a ",(0,i.kt)("inlineCode",{parentName:"p"},"job")," in Wasp, simply add a declaration with a reference to an ",(0,i.kt)("inlineCode",{parentName:"p"},"async")," function, like the following:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-wasp",metastring:'title="main.wasp"',title:'"main.wasp"'},'job mySpecialJob {\n  executor: PgBoss,\n  perform: {\n    fn: import { foo } from "@server/workers/bar.js"\n  }\n}\n')),(0,i.kt)("p",null,"Then, in your ",(0,i.kt)("a",{parentName:"p",href:"/docs/language/features#queries-and-actions-aka-operations"},"Operations")," or ",(0,i.kt)("a",{parentName:"p",href:"/docs/language/features#setupfn-serverimport-optional"},"setupFn")," (or any other NodeJS code), you can submit work to be done:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},'import { mySpecialJob } from \'@wasp/jobs/mySpecialJob.js\'\n\nconst submittedJob = await mySpecialJob.submit({ job: "args" })\nconsole.log(await submittedJob.pgBoss.details())\n\n// Or, if you\'d prefer it to execute in the future, just add a .delay().\n// It takes a number of seconds, Date, or ISO date string.\nawait mySpecialJob.delay(10).submit({ job: "args" })\n')),(0,i.kt)("p",null,"And that is it! Your job will be executed by the job executor (pg-boss, in this case) as if you called ",(0,i.kt)("inlineCode",{parentName:"p"},'foo({ job: "args" })'),"."),(0,i.kt)("p",null,"Note that in our example, ",(0,i.kt)("inlineCode",{parentName:"p"},"foo")," takes an argument, but this does not always have to be the case. It all depends on how you've implemented your worker function."),(0,i.kt)("h3",{id:"recurring-jobs"},"Recurring jobs"),(0,i.kt)("p",null,"If you have work that needs to be done on some recurring basis, you can add a ",(0,i.kt)("inlineCode",{parentName:"p"},"schedule")," to your job declaration:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-wasp",metastring:'{6-9} title="main.wasp"',"{6-9}":!0,title:'"main.wasp"'},'job mySpecialJob {\n  executor: PgBoss,\n  perform: {\n    fn: import { foo } from "@server/workers/bar.js"\n  },\n  schedule: {\n    cron: "0 * * * *",\n    args: {=json { "job": "args" } json=} // optional\n  }\n}\n')),(0,i.kt)("p",null,"In this example, you do ",(0,i.kt)("em",{parentName:"p"},"not")," need to invoke anything in JavaScript. You can imagine ",(0,i.kt)("inlineCode",{parentName:"p"},'foo({ job: "args" })')," getting automatically scheduled and invoked for you every hour."),(0,i.kt)("h3",{id:"fully-specified-example"},"Fully specified example"),(0,i.kt)("p",null,"Both ",(0,i.kt)("inlineCode",{parentName:"p"},"perform")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"schedule")," accept ",(0,i.kt)("inlineCode",{parentName:"p"},"executorOptions"),", which we pass directly to the named job executor when you submit jobs. In this example, the scheduled job will have a ",(0,i.kt)("inlineCode",{parentName:"p"},"retryLimit")," set to 0, as ",(0,i.kt)("inlineCode",{parentName:"p"},"schedule")," overrides any similar property from ",(0,i.kt)("inlineCode",{parentName:"p"},"perform"),". Lastly, we add an entity to pass in via the context argument to ",(0,i.kt)("inlineCode",{parentName:"p"},"perform.fn"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-wasp"},'job mySpecialJob {\n  executor: PgBoss,\n  perform: {\n    fn: import { foo } from "@server/workers/bar.js",\n    executorOptions: {\n      pgBoss: {=json { "retryLimit": 1 } json=}\n    }\n  },\n  schedule: {\n    cron: "*/5 * * * *",\n    args: {=json { "foo": "bar" } json=},\n    executorOptions: {\n      pgBoss: {=json { "retryLimit": 0 } json=}\n    }\n  },\n  entities: [Task],\n}\n')),(0,i.kt)("h3",{id:"fields-3"},"Fields"),(0,i.kt)("h4",{id:"executor-jobexecutor-required"},(0,i.kt)("inlineCode",{parentName:"h4"},"executor: JobExecutor")," (required)"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"PgBoss")," is currently our only job executor, and is recommended for low-volume production use cases. It requires your ",(0,i.kt)("inlineCode",{parentName:"p"},"app.db.system")," to be ",(0,i.kt)("inlineCode",{parentName:"p"},"PostgreSQL"),"."),(0,i.kt)("h4",{id:"perform-dict-required"},(0,i.kt)("inlineCode",{parentName:"h4"},"perform: dict")," (required)"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("h5",{parentName:"li",id:"fn-serverimport-required"},(0,i.kt)("inlineCode",{parentName:"h5"},"fn: ServerImport")," (required)"),(0,i.kt)("p",{parentName:"li"},"An ",(0,i.kt)("inlineCode",{parentName:"p"},"async")," JavaScript function of work to be performed. Since Wasp executes jobs on the server, you must import it from ",(0,i.kt)("inlineCode",{parentName:"p"},"@server"),". The function receives a first argument which may be passed when the job is called, as well as the context containing any declared entities as the second (this is passed automatically by Wasp). Here is a sample signature:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-js"},"export async function foo(args, context) {\n  // Can reference context.entities.Task, for example.\n}\n"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("h5",{parentName:"li",id:"executoroptions-dict-optional"},(0,i.kt)("inlineCode",{parentName:"h5"},"executorOptions: dict")," (optional)"),(0,i.kt)("p",{parentName:"li"},"Executor-specific default options to use when submitting jobs. These are passed directly through and you should consult the documentation for the job executor. These can be overridden during invocation with ",(0,i.kt)("inlineCode",{parentName:"p"},"submit()")," or in a ",(0,i.kt)("inlineCode",{parentName:"p"},"schedule"),"."),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("h5",{parentName:"li",id:"pgboss-json-optional"},(0,i.kt)("inlineCode",{parentName:"h5"},"pgBoss: JSON")," (optional)"),"See the docs for ",(0,i.kt)("a",{parentName:"li",href:"https://github.com/timgit/pg-boss/blob/8.4.2/docs/readme.md#sendname-data-options"},"pg-boss"),".")))),(0,i.kt)("h4",{id:"schedule-dict-optional"},(0,i.kt)("inlineCode",{parentName:"h4"},"schedule: dict")," (optional)"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("h5",{parentName:"li",id:"cron-string-required"},(0,i.kt)("inlineCode",{parentName:"h5"},"cron: string")," (required)"),(0,i.kt)("p",{parentName:"li"},"A 5-placeholder format cron expression string. See rationale for minute-level precision ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/timgit/pg-boss/blob/8.4.2/docs/readme.md#scheduling"},"here"),"."),(0,i.kt)("p",{parentName:"li"},(0,i.kt)("em",{parentName:"p"},"If you need help building cron expressions, Check out")," ",(0,i.kt)("em",null,(0,i.kt)("a",{parentName:"p",href:"https://crontab.guru/#0_*_*_*_*"},"Crontab guru"),"."))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("h5",{parentName:"li",id:"args-json-optional"},(0,i.kt)("inlineCode",{parentName:"h5"},"args: JSON")," (optional)"),(0,i.kt)("p",{parentName:"li"},"The arguments to pass to the ",(0,i.kt)("inlineCode",{parentName:"p"},"perform.fn")," function when invoked.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("h5",{parentName:"li",id:"executoroptions-dict-optional-1"},(0,i.kt)("inlineCode",{parentName:"h5"},"executorOptions: dict")," (optional)"),(0,i.kt)("p",{parentName:"li"},"Executor-specific options to use when submitting jobs. These are passed directly through and you should consult the documentation for the job executor. The ",(0,i.kt)("inlineCode",{parentName:"p"},"perform.executorOptions")," are the default options, and ",(0,i.kt)("inlineCode",{parentName:"p"},"schedule.executorOptions")," can override/extend those."),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("h5",{parentName:"li",id:"pgboss-json-optional-1"},(0,i.kt)("inlineCode",{parentName:"h5"},"pgBoss: JSON")," (optional)"),"See the docs for ",(0,i.kt)("a",{parentName:"li",href:"https://github.com/timgit/pg-boss/blob/8.4.2/docs/readme.md#sendname-data-options"},"pg-boss"),".")))),(0,i.kt)("h4",{id:"entities-entity-optional"},(0,i.kt)("inlineCode",{parentName:"h4"},"entities: [Entity]")," (optional)"),(0,i.kt)("p",null,"A list of entities you wish to use inside your Job (similar to Queries and Actions)."),(0,i.kt)("h3",{id:"javascript-api"},"JavaScript API"),(0,i.kt)("h4",{id:"invocation"},"Invocation"),(0,i.kt)("h5",{id:"import"},(0,i.kt)("inlineCode",{parentName:"h5"},"import")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"import { mySpecialJob } from '@wasp/jobs/mySpecialJob.js'\n")),(0,i.kt)("h5",{id:"submitjobargs-executoroptions"},(0,i.kt)("inlineCode",{parentName:"h5"},"submit(jobArgs, executorOptions)")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("h6",{parentName:"li",id:"jobargs-json-optional"},(0,i.kt)("inlineCode",{parentName:"h6"},"jobArgs: JSON")," (optional)")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("h6",{parentName:"li",id:"executoroptions-json-optional"},(0,i.kt)("inlineCode",{parentName:"h6"},"executorOptions: JSON")," (optional)"))),(0,i.kt)("p",null,"Submits a ",(0,i.kt)("inlineCode",{parentName:"p"},"job")," to be executed by an executor, optionally passing in a JSON job argument your job handler function will receive, and executor-specific submit options."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},'const submittedJob = await mySpecialJob.submit({ job: "args" })\n')),(0,i.kt)("h5",{id:"delaystartafter-optional"},(0,i.kt)("inlineCode",{parentName:"h5"},"delay(startAfter)")," (optional)"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("h6",{parentName:"li",id:"startafter-int--string--date-required"},(0,i.kt)("inlineCode",{parentName:"h6"},"startAfter: int | string | Date")," (required)"))),(0,i.kt)("p",null,"Delaying the invocation of the job handler. The delay can be one of:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Integer: number of seconds to delay. ","[Default 0]"),(0,i.kt)("li",{parentName:"ul"},"String: ISO date string to run at."),(0,i.kt)("li",{parentName:"ul"},"Date: Date to run at.")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},'const submittedJob = await mySpecialJob.delay(10).submit({ job: "args" }, { "retryLimit": 2 })\n')),(0,i.kt)("h4",{id:"tracking"},"Tracking"),(0,i.kt)("p",null,"The return value of ",(0,i.kt)("inlineCode",{parentName:"p"},"submit()")," is an instance of ",(0,i.kt)("inlineCode",{parentName:"p"},"SubmittedJob"),", which minimally contains:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"jobId"),": A getter returning the UUID String ID for the job in that executor."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"jobName"),": A getter returning the name of the job you used in your ",(0,i.kt)("inlineCode",{parentName:"li"},".wasp")," file."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"executorName"),": A getter returning a Symbol of the name of the job executor.",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"For pg-boss, you can import a Symbol from: ",(0,i.kt)("inlineCode",{parentName:"li"},"import { PG_BOSS_EXECUTOR_NAME } from '@wasp/jobs/core/pgBoss/pgBossJob.js'")," if you wish to compare against ",(0,i.kt)("inlineCode",{parentName:"li"},"executorName"),".")))),(0,i.kt)("p",null,"There will also be namespaced, job executor-specific objects."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"For pg-boss, you may access: ",(0,i.kt)("inlineCode",{parentName:"li"},"pgBoss"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"NOTE"),": no arguments are necessary, as we already applied the ",(0,i.kt)("inlineCode",{parentName:"li"},"jobId")," in the available functions."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"details()"),": pg-boss specific job detail information. ",(0,i.kt)("a",{parentName:"li",href:"https://github.com/timgit/pg-boss/blob/8.4.2/docs/readme.md#getjobbyidid"},"Reference")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"cancel()"),": attempts to cancel a job. ",(0,i.kt)("a",{parentName:"li",href:"https://github.com/timgit/pg-boss/blob/8.4.2/docs/readme.md#cancelid"},"Reference")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"resume()"),": attempts to resume a canceled job. ",(0,i.kt)("a",{parentName:"li",href:"https://github.com/timgit/pg-boss/blob/8.4.2/docs/readme.md#resumeid"},"Reference"))))),(0,i.kt)("h2",{id:"dependencies"},"Dependencies"),(0,i.kt)("p",null,"You can specify additional npm dependencies via ",(0,i.kt)("inlineCode",{parentName:"p"},"dependencies")," field in ",(0,i.kt)("inlineCode",{parentName:"p"},"app")," declaration, in following way:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-wasp"},'app MyApp {\n  title: "My app",\n  // ...\n  dependencies: [\n    ("redux", "^4.0.5"),\n    ("react-redux", "^7.1.3")\n  ]\n}\n')),(0,i.kt)("p",null,"You will need to re-run ",(0,i.kt)("inlineCode",{parentName:"p"},"wasp start")," after adding a dependency for Wasp to pick it up."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"NOTE"),": In current implementation of Wasp, if Wasp is already internally using certain npm dependency with certain version specified, you are not allowed to define that same npm dependency yourself while specifying different version.\nIf you do that, you will get an error message telling you which exact version you have to use for that dependency.\nThis means Wasp dictates exact versions of certain packages, so for example you can't choose version of React you want to use.\nIn the future, we will add support for picking any version you like, but we have not implemented that yet. Check ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/wasp-lang/wasp/issues/59"},"issue #59")," to check out the progress or contribute."),(0,i.kt)("h2",{id:"authentication--authorization"},"Authentication & Authorization"),(0,i.kt)("p",null,"Wasp provides authentication and authorization support out-of-the-box. Enabling it for your app is optional and can be done by configuring the ",(0,i.kt)("inlineCode",{parentName:"p"},"auth")," field of the ",(0,i.kt)("inlineCode",{parentName:"p"},"app")," declaration:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-wasp"},'app MyApp {\n  title: "My app",\n  //...\n  auth: {\n    userEntity: User,\n    externalAuthEntity: SocialLogin,\n    methods: {\n      usernameAndPassword: {}, // use this or email, not both\n      email: {}, // use this or usernameAndPassword, not both\n      google: {},\n      gitHub: {},\n    },\n    onAuthFailedRedirectTo: "/someRoute"\n  }\n}\n\n//...\n')),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"app.auth")," is a dictionary with following fields:"),(0,i.kt)("h4",{id:"userentity-entity-required"},(0,i.kt)("inlineCode",{parentName:"h4"},"userEntity: entity")," (required)"),(0,i.kt)("p",null,"Entity which represents the user."),(0,i.kt)("h4",{id:"externalauthentity-entity-optional"},(0,i.kt)("inlineCode",{parentName:"h4"},"externalAuthEntity: entity")," (optional)"),(0,i.kt)("p",null,"Entity which associates a user with some external authentication provider. We currently offer support for Google and GitHub. See the sections on ",(0,i.kt)("a",{parentName:"p",href:"#social-login-providers-oauth-20"},"Social Login Providers")," for more info."),(0,i.kt)("h4",{id:"methods-dict-required"},(0,i.kt)("inlineCode",{parentName:"h4"},"methods: dict")," (required)"),(0,i.kt)("p",null,"List of authentication methods that Wasp app supports. Currently supported methods are:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"usernameAndPassword"),": authentication with a username and password. See ",(0,i.kt)("a",{parentName:"li",href:"#username-and-password"},"here")," for more."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"email"),": authentication with a email and password. See ",(0,i.kt)("a",{parentName:"li",href:"#email-authentication"},"here")," for more."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"google"),": authentication via Google accounts. See ",(0,i.kt)("a",{parentName:"li",href:"#social-login-providers-oauth-20"},"here")," for more."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"gitHub"),": authentication via GitHub accounts. See ",(0,i.kt)("a",{parentName:"li",href:"#social-login-providers-oauth-20"},"here")," for more.")),(0,i.kt)("h4",{id:"onauthfailedredirectto-string-required"},(0,i.kt)("inlineCode",{parentName:"h4"},"onAuthFailedRedirectTo: String")," (required)"),(0,i.kt)("p",null,"Path where an unauthenticated user will be redirected to if they try to access a private page (which is declared by setting ",(0,i.kt)("inlineCode",{parentName:"p"},"authRequired: true")," for a specific page).\nCheck out this ",(0,i.kt)("a",{parentName:"p",href:"/docs/tutorial/auth#update-the-main-page-to-require-auth"},"section of our Todo app tutorial")," to see an example of usage."),(0,i.kt)("h4",{id:"onauthsucceededredirectto-string-optional"},(0,i.kt)("inlineCode",{parentName:"h4"},"onAuthSucceededRedirectTo: String")," (optional)"),(0,i.kt)("p",null,'Path where a successfully authenticated user will be sent upon successful login/signup.\nDefault value is "/".'),(0,i.kt)("admonition",{type:"note"},(0,i.kt)("p",{parentName:"admonition"},"Automatic redirect on successful login only works when using the Wasp provided ",(0,i.kt)("a",{parentName:"p",href:"#high-level-api"},(0,i.kt)("inlineCode",{parentName:"a"},"Signup")," and ",(0,i.kt)("inlineCode",{parentName:"a"},"Login")," forms"))),(0,i.kt)("h3",{id:"username-and-password"},"Username and Password"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"usernameAndPassword")," authentication method makes it possible to signup/login into the app by using a username and password.\nThis method requires that ",(0,i.kt)("inlineCode",{parentName:"p"},"userEntity")," specified in ",(0,i.kt)("inlineCode",{parentName:"p"},"auth")," contains ",(0,i.kt)("inlineCode",{parentName:"p"},"username: string")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"password: string")," fields:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-wasp"},'app MyApp {\n  title: "My app",\n  //...\n\n  auth: {\n    userEntity: User,\n    methods: {\n      usernameAndPassword: {},\n    },\n    onAuthFailedRedirectTo: "/someRoute"\n  }\n}\n\n// Wasp requires the userEntity to have at least the following fields\nentity User {=psl\n    id                        Int           @id @default(autoincrement())\n    username                  String        @unique\n    password                  String\npsl=}\n')),(0,i.kt)("p",null,"We provide basic validations out of the box, which you can customize as shown below. Default validations are:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"username"),": non-empty"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"password"),": non-empty, at least 8 characters, and contains a number")),(0,i.kt)("p",null,"Note that ",(0,i.kt)("inlineCode",{parentName:"p"},"username"),"s are stored in a case-sensitive manner."),(0,i.kt)("h4",{id:"high-level-api"},"High-level API"),(0,i.kt)("p",null,"The quickest way to get started is by using the following API generated by Wasp:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Signup and Login forms at ",(0,i.kt)("inlineCode",{parentName:"li"},"@wasp/auth/forms/Signup")," and ",(0,i.kt)("inlineCode",{parentName:"li"},"@wasp/auth/forms/Login")," routes",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"For styling, these default authentication components have form classes associated for both login (",(0,i.kt)("inlineCode",{parentName:"li"},"login-form"),") and signup (",(0,i.kt)("inlineCode",{parentName:"li"},"signup-form"),"). Additionally, they both share a common class (",(0,i.kt)("inlineCode",{parentName:"li"},"auth-form"),")."))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"logout")," function"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"useAuth()")," React hook\n",(0,i.kt)("strong",{parentName:"li"},"NOTE:")," If the signup is successful, the Signup form will automatically log in the user.")),(0,i.kt)("p",null,"Check our ",(0,i.kt)("a",{parentName:"p",href:"/docs/tutorial/auth"},"Todo app tutorial")," to see how it works. See below for detailed specification of each of these methods."),(0,i.kt)("h4",{id:"lower-level-api"},"Lower-level API"),(0,i.kt)("p",null,"If you require more control in your authentication flow, you can achieve that in the following ways:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"If you don't want to use already generated Signup and Login forms and want to create your own, you can use ",(0,i.kt)("inlineCode",{parentName:"li"},"signup")," and ",(0,i.kt)("inlineCode",{parentName:"li"},"login")," function by invoking them from the client."),(0,i.kt)("li",{parentName:"ul"},"If you want to execute custom code on the server during sign up, create your own sign up action which invokes Prisma client as ",(0,i.kt)("inlineCode",{parentName:"li"},"context.entities.[USER_ENTITY].create()")," function, along with your custom code.")),(0,i.kt)("p",null,"The code of your custom sign-up action would look like this (your user entity being ",(0,i.kt)("inlineCode",{parentName:"p"},"User")," in this instance):"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="src/server/auth/signup.js"',title:'"src/server/auth/signup.js"'},"export const signUp = async (args, context) => {\n  // Your custom code before sign-up.\n  // ...\n\n  const newUser = context.entities.User.create({\n    data: {\n      username: args.username,\n      password: args.password // password hashed automatically by Wasp! \ud83d\udc1d\n    }\n  })\n\n  // Your custom code after sign-up.\n  // ...\n  return newUser\n}\n")),(0,i.kt)("admonition",{type:"info"},(0,i.kt)("p",{parentName:"admonition"},"You don't need to worry about hashing the password yourself! Even when you are using Prisma's client directly and calling ",(0,i.kt)("inlineCode",{parentName:"p"},"create()")," with a plain-text password, Wasp's middleware takes care of hashing it before storing it in the database. An additional middleware also performs field validation.")),(0,i.kt)("h5",{id:"customizing-user-entity-validations"},"Customizing user entity validations"),(0,i.kt)("p",null,"To disable/enable default validations, or add your own, you can modify your custom signUp function like so:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"const newUser = context.entities.User.create({\n  data: {\n    username: args.username,\n    password: args.password // password hashed automatically by Wasp! \ud83d\udc1d\n  },\n  _waspSkipDefaultValidations: false, // can be omitted if false (default), or explicitly set to true\n  _waspCustomValidations: [\n    {\n      validates: 'password',\n      message: 'password must contain an uppercase letter',\n      validator: password => /[A-Z]/.test(password)\n    },\n  ]\n})\n")),(0,i.kt)("admonition",{type:"info"},(0,i.kt)("p",{parentName:"admonition"},"Validations always run on ",(0,i.kt)("inlineCode",{parentName:"p"},"create()"),", but only when the field mentioned in ",(0,i.kt)("inlineCode",{parentName:"p"},"validates")," is present for ",(0,i.kt)("inlineCode",{parentName:"p"},"update()"),". The validation process stops on the first ",(0,i.kt)("inlineCode",{parentName:"p"},"validator")," to return false. If enabled, default validations run first and validate basic properties of both the ",(0,i.kt)("inlineCode",{parentName:"p"},"'username'")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"'password'")," fields.")),(0,i.kt)("h4",{id:"specification"},"Specification"),(0,i.kt)("h4",{id:"login"},(0,i.kt)("inlineCode",{parentName:"h4"},"login()")),(0,i.kt)("p",null,"An action for logging in the user."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"login(username, password)\n")),(0,i.kt)("admonition",{type:"info"},(0,i.kt)("p",{parentName:"admonition"},"When using the exposed ",(0,i.kt)("inlineCode",{parentName:"p"},"login()")," function, make sure to implement your own redirect on successful login logic")),(0,i.kt)("h4",{id:"username-string"},(0,i.kt)("inlineCode",{parentName:"h4"},"username: string")),(0,i.kt)("p",null,"Username of the user logging in."),(0,i.kt)("h4",{id:"password-string"},(0,i.kt)("inlineCode",{parentName:"h4"},"password: string")),(0,i.kt)("p",null,"Password of the user logging in."),(0,i.kt)("h4",{id:"import-statement-1"},(0,i.kt)("inlineCode",{parentName:"h4"},"import statement"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"import login from '@wasp/auth/login'\n")),(0,i.kt)("p",null,"Login is a regular action and can be used directly from the frontend."),(0,i.kt)("h4",{id:"signup"},(0,i.kt)("inlineCode",{parentName:"h4"},"signup()")),(0,i.kt)("p",null,"An action for signing up the user. This action does not log in the user, you still need to call ",(0,i.kt)("inlineCode",{parentName:"p"},"login()"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"signup(userFields)\n")),(0,i.kt)("h4",{id:"userfields-object"},(0,i.kt)("inlineCode",{parentName:"h4"},"userFields: object")),(0,i.kt)("p",null,"Auth-related fields (either ",(0,i.kt)("inlineCode",{parentName:"p"},"username")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"email")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"password"),") of the user entity which was declared in ",(0,i.kt)("inlineCode",{parentName:"p"},"auth"),"."),(0,i.kt)("admonition",{type:"info"},(0,i.kt)("p",{parentName:"admonition"},"Wasp only stores the auth-related fields of the user entity. Adding extra fields to ",(0,i.kt)("inlineCode",{parentName:"p"},"userFields")," will not have any effect."),(0,i.kt)("p",{parentName:"admonition"},"If you need to add extra fields to the user entity, we suggest doing it in a separate step after the user logs in for the first time.")),(0,i.kt)("h4",{id:"import-statement-2"},(0,i.kt)("inlineCode",{parentName:"h4"},"import statement"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"import signup from '@wasp/auth/signup'\n")),(0,i.kt)("p",null,"Signup is a regular action and can be used directly from the frontend."),(0,i.kt)("h4",{id:"logout"},(0,i.kt)("inlineCode",{parentName:"h4"},"logout()")),(0,i.kt)("p",null,"An action for logging out the user."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"logout()\n")),(0,i.kt)("h4",{id:"import-statement-3"},(0,i.kt)("inlineCode",{parentName:"h4"},"import statement"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"import logout from '@wasp/auth/logout'\n")),(0,i.kt)("h5",{id:"example-of-usage-1"},"Example of usage:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx"},"import logout from '@wasp/auth/logout'\n\nconst SignOut = () => {\n  return (\n    <button onClick={logout}>Logout</button>\n  )\n}\n")),(0,i.kt)("h4",{id:"updating-a-users-password"},"Updating a user's password"),(0,i.kt)("p",null,"If you need to update user's password, you can do it safely via Prisma client, e.g. within an action:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"export const updatePassword = async (args, context) => {\n  return context.entities.User.update({\n    where: { id: args.userId },\n    data: {\n      password: 'New pwd which will be hashed automatically!'\n    }\n  })\n}\n")),(0,i.kt)("p",null,"You don't need to worry about hashing the password yourself - if you have an ",(0,i.kt)("inlineCode",{parentName:"p"},"auth")," declaration\nin your ",(0,i.kt)("inlineCode",{parentName:"p"},".wasp")," file, Wasp already set a middleware on Prisma that makes sure whenever password\nis created or updated on the user entity, it is also hashed before it is stored to the database."),(0,i.kt)("h3",{id:"email-authentication"},"Email authentication"),(0,i.kt)("admonition",{type:"info"},(0,i.kt)("p",{parentName:"admonition"},"We have written a step-by-step guide on how to set up the e-mail authentication with Wasp's included Auth UI. "),(0,i.kt)("p",{parentName:"admonition"},"Read more in the ",(0,i.kt)("a",{parentName:"p",href:"/docs/guides/email-auth"},"email authentication guide"),".")),(0,i.kt)("admonition",{type:"warning"},(0,i.kt)("p",{parentName:"admonition"},"If a user signs up with Google or Github (and you set it up to save their social provider e-mail info on the ",(0,i.kt)("inlineCode",{parentName:"p"},"User")," entity), they'll be able to reset their password and login with e-mail and password."),(0,i.kt)("p",{parentName:"admonition"},"If a user signs up with the e-mail and password and then tries to login with a social provider (Google or Github), they won't be able to do that."),(0,i.kt)("p",{parentName:"admonition"},"In the future, we will lift this limitation and enable smarter merging of accounts.")),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"email")," authentication method makes it possible to signup/login into the app by using an e-mail and a password."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-wasp",metastring:'title="main.wasp"',title:'"main.wasp"'},'app MyApp {\n  title: "My app",\n  // ...\n\n  auth: {\n    userEntity: User,\n    methods: {\n      email: {\n        // we\'ll deal with `email` below\n      },\n    },\n    onAuthFailedRedirectTo: "/someRoute"\n  },\n  // ...\n}\n\n// Wasp requires the userEntity to have at least the following fields\nentity User {=psl\n    id                        Int           @id @default(autoincrement())\n    email                     String?       @unique\n    password                  String?\n    isEmailVerified           Boolean       @default(false)\n    emailVerificationSentAt   DateTime?\n    passwordResetSentAt       DateTime?\npsl=}\n')),(0,i.kt)("p",null,"This method requires that ",(0,i.kt)("inlineCode",{parentName:"p"},"userEntity")," specified in ",(0,i.kt)("inlineCode",{parentName:"p"},"auth")," contains:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"optional ",(0,i.kt)("inlineCode",{parentName:"li"},"email")," field of type ",(0,i.kt)("inlineCode",{parentName:"li"},"String")),(0,i.kt)("li",{parentName:"ul"},"optional ",(0,i.kt)("inlineCode",{parentName:"li"},"password")," field of type ",(0,i.kt)("inlineCode",{parentName:"li"},"String")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"isEmailVerified")," field of type ",(0,i.kt)("inlineCode",{parentName:"li"},"Boolean")," with a default value of ",(0,i.kt)("inlineCode",{parentName:"li"},"false")),(0,i.kt)("li",{parentName:"ul"},"optional ",(0,i.kt)("inlineCode",{parentName:"li"},"emailVerificationSentAt")," field of type ",(0,i.kt)("inlineCode",{parentName:"li"},"DateTime")),(0,i.kt)("li",{parentName:"ul"},"optional ",(0,i.kt)("inlineCode",{parentName:"li"},"passwordResetSentAt")," field of type ",(0,i.kt)("inlineCode",{parentName:"li"},"DateTime"))),(0,i.kt)("h4",{id:"fields-in-the-email-dict"},"Fields in the ",(0,i.kt)("inlineCode",{parentName:"h4"},"email")," dict"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-wasp",metastring:'title="main.wasp"',title:'"main.wasp"'},'app MyApp {\n  title: "My app",\n  // ...\n\n  auth: {\n    userEntity: User,\n    methods: {\n      email: {\n        fromField: {\n          name: "My App",\n          email: "hello@itsme.com"\n        },\n        emailVerification: {\n          clientRoute: EmailVerificationRoute,\n          getEmailContentFn: import { getVerificationEmailContent } from "@server/auth/email.js",\n        },\n        passwordReset: {\n          clientRoute: PasswordResetRoute,\n          getEmailContentFn: import { getPasswordResetEmailContent } from "@server/auth/email.js",\n        },\n        allowUnverifiedLogin: false,\n      },\n    },\n    onAuthFailedRedirectTo: "/someRoute"\n  },\n  // ...\n}\n')),(0,i.kt)("h5",{id:"fromfield-emailfromfield-required"},(0,i.kt)("inlineCode",{parentName:"h5"},"fromField: EmailFromField")," (required)"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"fromField")," is a dict that specifies the name and e-mail address of the sender of the e-mails sent by Wasp. It is required to be defined. The object has the following fields:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"name"),": name of the sender (optional)"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"email"),": e-mail address of the sender")),(0,i.kt)("h5",{id:"emailverification-emailverificationconfig-required"},(0,i.kt)("inlineCode",{parentName:"h5"},"emailVerification: EmailVerificationConfig")," (required)"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"emailVerification")," is a dict that specifies the e-mail verification process. It is required to be defined."),(0,i.kt)("p",null,"The object has the following fields:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"clientRoute: Route"),": a route that is used for the user to verify their e-mail address. (required)")),(0,i.kt)("p",null,"Client route should handle the process of taking a token from the URL and sending it to the server to verify the e-mail address. You can use our ",(0,i.kt)("inlineCode",{parentName:"p"},"verifyEmail")," action for that."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="src/pages/EmailVerificationPage.jsx"',title:'"src/pages/EmailVerificationPage.jsx"'},"import { verifyEmail } from '@wasp/auth/email/actions';\n...\nawait verifyEmail({ token });\n")),(0,i.kt)("p",null,"Read on how to do it the easiest way with Auth UI in the ",(0,i.kt)("a",{parentName:"p",href:"/docs/guides/email-auth"},"email authentication guide"),"."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"getEmailContentFn: ServerImport"),": a function that returns the content of the e-mail that is sent to the user. (optional)")),(0,i.kt)("p",null,"Defining ",(0,i.kt)("inlineCode",{parentName:"p"},"getEmailContentFn")," can be done by defining a Javscript or Typescript file in the ",(0,i.kt)("inlineCode",{parentName:"p"},"server")," directory."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="server/email.ts"',title:'"server/email.ts"'},"import { GetVerificationEmailContentFn } from '@wasp/types'\n\nexport const getVerificationEmailContent: GetVerificationEmailContentFn = ({\n  verificationLink,\n}) => ({\n  subject: 'Verify your email',\n  text: `Click the link below to verify your email: ${verificationLink}`,\n  html: `\n        <p>Click the link below to verify your email</p>\n        <a href=\"${verificationLink}\">Verify email</a>\n    `,\n})\n")),(0,i.kt)("h5",{id:"passwordreset-passwordresetconfig-required"},(0,i.kt)("inlineCode",{parentName:"h5"},"passwordReset: PasswordResetConfig")," (required)"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"passwordReset")," is a dict that specifies the password reset process. It is required to be defined. The object has the following fields:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"clientRoute: Route"),": a route that is used for the user to reset their password. (required)")),(0,i.kt)("p",null,"Client route should handle the process of taking a token from the URL and a new password from the user and sending it to the server.  You can use our ",(0,i.kt)("inlineCode",{parentName:"p"},"requestPasswordReset")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"resetPassword")," actions to do that."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="src/pages/ForgotPasswordPage.jsx"',title:'"src/pages/ForgotPasswordPage.jsx"'},"import { requestPasswordReset } from '@wasp/auth/email/actions';\n...\nawait requestPasswordReset({ email });\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="src/pages/PasswordResetPage.jsx"',title:'"src/pages/PasswordResetPage.jsx"'},"import { resetPassword } from '@wasp/auth/email/actions';\n...\nawait resetPassword({ password, token })\n")),(0,i.kt)("h5",{id:"allowunverifiedlogin-bool-a-boolean-that-specifies-whether-the-user-can-login-without-verifying-their-e-mail-address-optional"},(0,i.kt)("inlineCode",{parentName:"h5"},"allowUnverifiedLogin: bool"),": a boolean that specifies whether the user can login without verifying their e-mail address. (optional)"),(0,i.kt)("p",null,"It defaults to ",(0,i.kt)("inlineCode",{parentName:"p"},"false"),". If ",(0,i.kt)("inlineCode",{parentName:"p"},"allowUnverifiedLogin")," is set to ",(0,i.kt)("inlineCode",{parentName:"p"},"true"),", the user can login without verifying their e-mail address, otherwise users will receive a ",(0,i.kt)("inlineCode",{parentName:"p"},"401")," error when trying to login without verifying their e-mail address."),(0,i.kt)("p",null,"Read on how to do it the easiest way with Auth UI in the ",(0,i.kt)("a",{parentName:"p",href:"/docs/guides/email-auth"},"email authentication guide"),"."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"getEmailContentFn: ServerImport"),": a function that returns the content of the e-mail that is sent to the user. (optional)")),(0,i.kt)("p",null,"Defining ",(0,i.kt)("inlineCode",{parentName:"p"},"getEmailContentFn")," is done by defining a function that looks like this:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="server/email.ts"',title:'"server/email.ts"'},"import { GetPasswordResetEmailContentFn } from '@wasp/types'\n\nexport const getPasswordResetEmailContent: GetPasswordResetEmailContentFn = ({\n  passwordResetLink,\n}) => ({\n  subject: 'Password reset',\n  text: `Click the link below to reset your password: ${passwordResetLink}`,\n  html: `\n        <p>Click the link below to reset your password</p>\n        <a href=\"${passwordResetLink}\">Reset password</a>\n    `,\n})\n")),(0,i.kt)("h4",{id:"email-sender-for-email-authentication"},"Email sender for email authentication"),(0,i.kt)("p",null,"We require that you define an ",(0,i.kt)("inlineCode",{parentName:"p"},"emailSender"),", so that Wasp knows how to send e-mails. Read more about that ",(0,i.kt)("a",{parentName:"p",href:"#email-sender"},"here"),"."),(0,i.kt)("h4",{id:"validations"},"Validations"),(0,i.kt)("p",null,"We provide basic validations out of the box. The validations are:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"email"),": non-empty, valid e-mail address"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"password"),": non-empty, at least 8 characters, and contains a number")),(0,i.kt)("p",null,"Note that ",(0,i.kt)("inlineCode",{parentName:"p"},"email"),"s are stored in a case-insensitive manner."),(0,i.kt)("admonition",{type:"info"},(0,i.kt)("p",{parentName:"admonition"},"You don't need to worry about hashing the password yourself! Even when you are using Prisma's client directly and calling ",(0,i.kt)("inlineCode",{parentName:"p"},"create()")," with a plain-text password, Wasp's middleware takes care of hashing it before storing it in the database. An additional middleware also performs field validation.")),(0,i.kt)("h3",{id:"social-login-providers-oauth-20"},"Social Login Providers (OAuth 2.0)"),(0,i.kt)("p",null,"Wasp allows you to easily add social login providers to your app."),(0,i.kt)("p",null,"The following is a list of links to guides that will help you get started with the currently supported providers:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/docs/integrations/github"},"GitHub")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/docs/integrations/google"},"Google"))),(0,i.kt)("p",null,"When using Social Login Providers, Wasp gives you the following options:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Default settings to get you started quickly"),(0,i.kt)("li",{parentName:"ul"},"UI Helpers to make it easy to add social login buttons and actions"),(0,i.kt)("li",{parentName:"ul"},"Override settings to customize the behavior of the providers")),(0,i.kt)("h4",{id:"default-settings"},"Default Settings"),(0,i.kt)(r.Z,{mdxType:"Tabs"},(0,i.kt)(o.Z,{value:"google",label:"Google",default:!0,mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-wasp"},"  auth: {\n    userEntity: User,\n    externalAuthEntity: SocialLogin,\n    methods: {\n      google: {},\n    },\n  }\n")),(0,i.kt)("p",null,"Add ",(0,i.kt)("code",null,"google: {}")," to your ",(0,i.kt)("code",null,"auth.methods")," dictionary to use it with default settings"),(0,i.kt)("p",null,"By default, Wasp expects you to set two environment variables in order to use Google authentication:"),(0,i.kt)("ul",null,(0,i.kt)("li",null,(0,i.kt)("code",null,"GOOGLE_CLIENT_ID")),(0,i.kt)("li",null,(0,i.kt)("code",null,"GOOGLE_CLIENT_SECRET"))),(0,i.kt)("p",null,"These can be obtained in your Google Cloud Console project dashboard. See ",(0,i.kt)("a",{href:"/docs/integrations/google"},"here")," for a detailed guide.")),(0,i.kt)(o.Z,{value:"gitHub",label:"GitHub",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-wasp"},"  auth: {\n    userEntity: User,\n    externalAuthEntity: SocialLogin,\n    methods: {\n      gitHub: {},\n    },\n  }\n")),(0,i.kt)("p",null,"Add ",(0,i.kt)("code",null,"gitHub: {}")," to your ",(0,i.kt)("code",null,"auth.methods")," dictionary to use it with default settings"),(0,i.kt)("p",null,"By default, Wasp expects you to set two environment variables in order to use GitHub authentication:"),(0,i.kt)("ul",null,(0,i.kt)("li",null,(0,i.kt)("code",null,"GITHUB_CLIENT_ID")),(0,i.kt)("li",null,(0,i.kt)("code",null,"GITHUB_CLIENT_SECRET"))),(0,i.kt)("p",null,"These can be obtained in your GitHub project dashboard. See ",(0,i.kt)("a",{href:"/docs/integrations/github"},"here")," for a detailed guide."))),(0,i.kt)("p",null,"When a user signs in for the first time, if the ",(0,i.kt)("inlineCode",{parentName:"p"},"userEntity")," has ",(0,i.kt)("inlineCode",{parentName:"p"},"username")," and/or ",(0,i.kt)("inlineCode",{parentName:"p"},"password")," fields Wasp assigns generated values to those fields by default (e.g. ",(0,i.kt)("inlineCode",{parentName:"p"},"username: nice-blue-horse-14357")," and a strong random ",(0,i.kt)("inlineCode",{parentName:"p"},"password"),"). This is a historical coupling between auth methods that will be removed over time. If you'd like to change this behavior, these values can be overridden as described below."),(0,i.kt)("admonition",{title:"Overriding Defaults",type:"tip"},(0,i.kt)("p",{parentName:"admonition"},"It is also possible to ",(0,i.kt)("a",{parentName:"p",href:"features#overrides-for-social-login-providers"},"override the default")," login behaviors that Wasp provides for you. This allows you to create custom setups, such as allowing Users to define a username rather than the default random username assigned by Wasp on initial Login.")),(0,i.kt)("h4",{id:"externalauthentity"},(0,i.kt)("inlineCode",{parentName:"h4"},"externalAuthEntity")),(0,i.kt)("p",null,"Anytime an authentication method is used that relies on an external authorization provider, for example, Google, we require an ",(0,i.kt)("inlineCode",{parentName:"p"},"externalAuthEntity")," specified in ",(0,i.kt)("inlineCode",{parentName:"p"},"auth"),", in addition to the ",(0,i.kt)("inlineCode",{parentName:"p"},"userEntity"),", that contains the following configuration:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-wasp",metastring:"{4,14}","{4,14}":!0},"//...\n  auth: {\n    userEntity: User,\n    externalAuthEntity: SocialLogin,\n//...\n\nentity User {=psl\n    id                        Int           @id @default(autoincrement())\n    //...\n    externalAuthAssociations  SocialLogin[]\npsl=}\n\nentity SocialLogin {=psl\n  id          Int       @id @default(autoincrement())\n  provider    String\n  providerId  String\n  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)\n  userId      Int\n  createdAt   DateTime  @default(now())\n  @@unique([provider, providerId, userId])\npsl=}\n")),(0,i.kt)("admonition",{type:"note"},(0,i.kt)("p",{parentName:"admonition"},"the same ",(0,i.kt)("inlineCode",{parentName:"p"},"externalAuthEntity")," can be used across different social login providers (e.g., both GitHub and Google can use the same entity).")),(0,i.kt)("h4",{id:"ui-helpers"},"UI helpers"),(0,i.kt)("p",null,"Wasp provides sign-in buttons, logos and URLs for your login page:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx"},"...\nimport { SignInButton as GoogleSignInButton, signInUrl as googleSignInUrl, logoUrl as googleLogoUrl } from '@wasp/auth/helpers/Google'\nimport { SignInButton as GitHubSignInButton, signInUrl as gitHubSignInUrl, logoUrl as gitHubLogoUrl } from '@wasp/auth/helpers/GitHub'\n\nconst Login = () => {\n  return (\n    <>\n      ...\n\n      <GoogleSignInButton/>\n      <GitHubSignInButton/>\n      {/* or */}\n      <a href={googleSignInUrl}>Sign in with Google</a>\n      <a href={gitHubSignInUrl}>Sign in with GitHub</a>\n    </>\n  )\n}\n\nexport default Login\n")),(0,i.kt)("p",null,"If you need more customization than what the buttons provide, you can create your own custom components using the ",(0,i.kt)("inlineCode",{parentName:"p"},"signInUrl"),"s."),(0,i.kt)("h4",{id:"overrides"},"Overrides"),(0,i.kt)("p",null,"When a user signs in for the first time, Wasp will create a new User account and link it to the chosen Auth Provider account for future logins. If the ",(0,i.kt)("inlineCode",{parentName:"p"},"userEntity")," contains a ",(0,i.kt)("inlineCode",{parentName:"p"},"username")," field it will default to a random dictionary phrase that does not exist in the database, such as ",(0,i.kt)("inlineCode",{parentName:"p"},"nice-blue-horse-27160"),". This is a historical coupling between auth methods that will be removed over time."),(0,i.kt)("p",null,"If you would like to allow the user to select their own username, or some other sign up flow, you could add a boolean property to your ",(0,i.kt)("inlineCode",{parentName:"p"},"User")," entity indicating the account setup is incomplete. You can then check this user's property on the client with the ",(0,i.kt)("a",{parentName:"p",href:"#useauth"},(0,i.kt)("inlineCode",{parentName:"a"},"useAuth()"))," hook and redirect them when appropriate"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"e.g. check on homepage if ",(0,i.kt)("inlineCode",{parentName:"li"},"user.isAuthSetup === false"),", redirect them to ",(0,i.kt)("inlineCode",{parentName:"li"},"EditUserDetailsPage")," where they can edit the ",(0,i.kt)("inlineCode",{parentName:"li"},"username")," property.")),(0,i.kt)("p",null,"Alternatively, you could add a ",(0,i.kt)("inlineCode",{parentName:"p"},"displayName")," property to your User entity and assign it using the details of their provider account. Below is an example of how to do this by using:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"the ",(0,i.kt)("inlineCode",{parentName:"li"},"getUserFieldsFn")," function to configure the user's ",(0,i.kt)("inlineCode",{parentName:"li"},"username")," or ",(0,i.kt)("inlineCode",{parentName:"li"},"displayName")," from their provider account")),(0,i.kt)("p",null,"We also show you how to customize the configuration of the Provider's settings using:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"the ",(0,i.kt)("inlineCode",{parentName:"li"},"configFn")," function")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-wasp",metastring:"title=main.wasp {9,10,13,14,26}",title:"main.wasp","{9,10,13,14,26}":!0},'app Example {\n  //...\n\n  auth: {\n    userEntity: User,\n    externalAuthEntity: SocialLogin,\n    methods: {\n      google: {\n        configFn: import { config } from "@server/auth/google.js",\n        getUserFieldsFn: import { getUserFields } from "@server/auth/google.js"\n      },\n      gitHub: {\n        configFn: import { config } from "@server/auth/github.js",\n        getUserFieldsFn: import { getUserFields } from "@server/auth/github.js"\n      }\n    },\n\n   //...\n  }\n}\n\nentity User {=psl\n    id          Int     @id @default(autoincrement())\n    username    String  @unique\n    password    String\n    displayName String?\n    externalAuthAssociations  SocialLogin[]\npsl=}\n\n//...\n\n')),(0,i.kt)("h4",{id:"configfn"},(0,i.kt)("inlineCode",{parentName:"h4"},"configFn")),(0,i.kt)("p",null,"This function should return an object with the following shape:"),(0,i.kt)(r.Z,{mdxType:"Tabs"},(0,i.kt)(o.Z,{value:"google",label:"Google",default:!0,mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js",metastring:"title=src/server/auth/google.js",title:"src/server/auth/google.js"},"export function config() {\n  // ...\n  return {\n    clientID, // look up from env or elsewhere,\n    clientSecret, // look up from env or elsewhere,\n    scope: ['profile'] // must include at least 'profile' for Google\n  }\n}\n\n// ...\n")),(0,i.kt)("p",null,"Here is a link to the ",(0,i.kt)("a",{href:"https://github.com/wasp-lang/wasp/blob/release/waspc/data/Generator/templates/server/src/routes/auth/passport/google/defaults.js"},"default implementations")," as a reference")),(0,i.kt)(o.Z,{value:"github",label:"GitHub",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js",metastring:"title=src/server/auth/github.js",title:"src/server/auth/github.js"},"export function config() {\n  // ...\n  return {\n    clientID, // look up from env or elsewhere,\n    clientSecret, // look up from env or elsewhere,\n    scope: [] // default is an empty array for GitHub\n  }\n}\n\n// ...\n")),(0,i.kt)("p",null,"Here is a link to the ",(0,i.kt)("a",{href:"https://github.com/wasp-lang/wasp/blob/release/waspc/data/Generator/templates/server/src/routes/auth/passport/github/defaults.js"},"default implementations")," as a reference"))),(0,i.kt)("h4",{id:"getuserfieldsfn"},(0,i.kt)("inlineCode",{parentName:"h4"},"getUserFieldsFn")),(0,i.kt)("p",null,"This function should return the user fields to use when creating a new user upon their first time logging in with a Social Auth Provider. The context contains a User entity for DB access, and the args are what the OAuth provider responds with. Here is how you could generate a username based on the Google display name. In your model, you could choose to add more attributes and set additional information."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js",metastring:"title=src/server/auth/google.js",title:"src/server/auth/google.js"},"import { generateAvailableUsername } from '@wasp/core/auth.js'\n\n// ...\n\nexport async function getUserFields(_context, args) {\n  const username = await generateAvailableUsername(args.profile.displayName.split(' '), { separator: '.' })\n  return { username }\n}\n")),(0,i.kt)("p",null,"  Or you could set the optional ",(0,i.kt)("inlineCode",{parentName:"p"},"displayName")," property on the ",(0,i.kt)("inlineCode",{parentName:"p"},"User")," entity instead:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js",metastring:"title=src/server/auth/google.js",title:"src/server/auth/google.js"},"import { generateAvailableDictionaryUsername, generateAvailableUsername } from '@wasp/core/auth.js'\n\n// ...\n\nexport async function getUserFields(_context, args) {\n  const username = await generateAvailableDictionaryUsername()\n  const displayName = await generateAvailableUsername(args.profile.displayName.split(' '), { separator: '.' })\n  return { username, displayName }\n}\n")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"generateAvailableUsername"),' takes an array of Strings and an optional separator and generates a string ending with a random number that is not yet in the database. For example, the above could produce something like "Jim.Smith.3984" for a Google user Jim Smith.'),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"generateAvailableDictionaryUsername")," generates a random dictionary phrase that is not yet in the database. For example, ",(0,i.kt)("inlineCode",{parentName:"li"},"nice-blue-horse-27160"),".")),(0,i.kt)("h3",{id:"validation-error-handling"},"Validation Error Handling"),(0,i.kt)("p",null,"When creating, updating, or deleting entities, you may wish to handle validation errors. We have exposed a class called ",(0,i.kt)("inlineCode",{parentName:"p"},"AuthError")," for this purpose. This could also be combined with ",(0,i.kt)("a",{parentName:"p",href:"/docs/language/features#prisma-error-helpers"},"Prisma Error Helpers"),"."),(0,i.kt)("h4",{id:"import-statement-4"},(0,i.kt)("inlineCode",{parentName:"h4"},"import statement"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"import AuthError from '@wasp/core/AuthError.js'\n")),(0,i.kt)("h5",{id:"example-of-usage-2"},"Example of usage:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"try {\n  await context.entities.User.update(...)\n} catch (e) {\n  if (e instanceof AuthError) {\n    throw new HttpError(422, 'Validation failed', { message: e.message })\n  } else {\n    throw e\n  }\n}\n")),(0,i.kt)("h2",{id:"accessing-the-currently-logged-in-user"},"Accessing the currently logged in user"),(0,i.kt)("p",null,"When authentication is enabled in a Wasp app, we need a way to tell whether a user is logged in and access its data.\nWith that, we can further implement access control and decide which content is private and which public."),(0,i.kt)("h4",{id:"on-the-client"},"On the client"),(0,i.kt)("p",null,"On the client, Wasp provides a React hook you can use in functional components - ",(0,i.kt)("inlineCode",{parentName:"p"},"useAuth"),".\nThis hook is actually a thin wrapper over Wasp's ",(0,i.kt)("a",{parentName:"p",href:"http://localhost:3002/docs/language/features#the-usequery-hook"},(0,i.kt)("inlineCode",{parentName:"a"},"useQuery")," hook")," and returns data in the same format."),(0,i.kt)("h3",{id:"useauth"},(0,i.kt)("inlineCode",{parentName:"h3"},"useAuth()")),(0,i.kt)("h4",{id:"import-statement-5"},(0,i.kt)("inlineCode",{parentName:"h4"},"import statement"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"import useAuth from '@wasp/auth/useAuth'\n")),(0,i.kt)("h5",{id:"example-of-usage-3"},"Example of usage:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="src/client/pages/MainPage.js"',title:'"src/client/pages/MainPage.js"'},"import React from 'react'\n\nimport { Link } from 'react-router-dom'\nimport useAuth from '@wasp/auth/useAuth'\nimport logout from '@wasp/auth/logout'\nimport Todo from '../Todo'\nimport '../Main.css'\n\nconst Main = () => {\n  const { data: user } = useAuth()\n\n  if (!user) {\n    return (\n      <span>\n        Please <Link to='/login'>login</Link> or <Link to='/signup'>sign up</Link>.\n      </span>\n    )\n  } else {\n    return (\n      <>\n        <button onClick={logout}>Logout</button>\n        <Todo />\n      < />\n    )\n  }\n}\n\nexport default Main\n")),(0,i.kt)("h4",{id:"on-the-server"},"On the server"),(0,i.kt)("h3",{id:"contextuser"},(0,i.kt)("inlineCode",{parentName:"h3"},"context.user")),(0,i.kt)("p",null,"When authentication is enabled, all operations (actions and queries) will have access to the ",(0,i.kt)("inlineCode",{parentName:"p"},"user")," through the ",(0,i.kt)("inlineCode",{parentName:"p"},"context")," argument. ",(0,i.kt)("inlineCode",{parentName:"p"},"context.user")," will contain all the fields from the user entity except for the password."),(0,i.kt)("h5",{id:"example-of-usage-4"},"Example of usage:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="src/server/actions.js"',title:'"src/server/actions.js"'},"import HttpError from '@wasp/core/HttpError.js'\n\nexport const createTask = async (task, context) => {\n  if (!context.user) {\n    throw new HttpError(403)\n  }\n\n  const Task = context.entities.Task\n  return Task.create({\n    data: {\n      description: task.description,\n      user: {\n        connect: { id: context.user.id }\n      }\n    }\n  })\n}\n")),(0,i.kt)("p",null,"In order to implement access control, each operation is responsible for checking ",(0,i.kt)("inlineCode",{parentName:"p"},"context.user")," and\nacting accordingly - e.g. if ",(0,i.kt)("inlineCode",{parentName:"p"},"context.user")," is ",(0,i.kt)("inlineCode",{parentName:"p"},"undefined")," and the operation is private then user\nshould be denied access to it."),(0,i.kt)("h2",{id:"client-configuration"},"Client configuration"),(0,i.kt)("p",null,"You can configure the client using the ",(0,i.kt)("inlineCode",{parentName:"p"},"client")," field inside the ",(0,i.kt)("inlineCode",{parentName:"p"},"app"),"\ndeclaration,"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-wasp"},'app MyApp {\n  title: "My app",\n  // ...\n  client: {\n    rootComponent: import Root from "@client/Root.jsx",\n    setupFn: import mySetupFunction from "@client/myClientSetupCode.js"\n  }\n}\n')),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"app.client")," is a dictionary with the following fields:"),(0,i.kt)("h4",{id:"rootcomponent-clientimport-optional"},(0,i.kt)("inlineCode",{parentName:"h4"},"rootComponent: ClientImport")," (optional)"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"rootComponent")," defines the root component of your client application. It is\nexpected to be a React component, and Wasp will use it to wrap your entire app.\nIt must render its children, which are the actual pages of your application."),(0,i.kt)("p",null,"You can use it to define a common layout for your application:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:'title="src/client/Root.jsx"',title:'"src/client/Root.jsx"'},"export default async function Root({ children }) {\n  return (\n    <div>\n      <header>\n        <h1>My App</h1>\n      </header>\n      {children}\n      <footer>\n        <p>My App footer</p>\n      </footer>\n    </div>\n  )\n}\n")),(0,i.kt)("p",null,"You can use it to set up various providers that your application needs:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:'title="src/client/Root.jsx"',title:'"src/client/Root.jsx"'},"import store from './store'\nimport { Provider } from 'react-redux'\n\nexport default async function Root({ children }) {\n  return (\n    <Provider store={store}>\n      {children}\n    </Provider>\n  )\n}\n")),(0,i.kt)("p",null,"As long as you render the children, you can do whatever you want in your root\ncomponent. Here's an example of a root component both sets up a provider and\nrenders a custom layout:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:'title="src/client/Root.jsx"',title:'"src/client/Root.jsx"'},"import store from './store'\nimport { Provider } from 'react-redux'\n\nexport default function Root({ children }) {\n  return (\n    <Provider store={store}>\n      <Layout>\n        {children}\n      </Layout>\n    </Provider>\n  )\n}\n\nfunction Layout({ children }) {\n  return (\n    <div>\n      <header>\n        <h1>My App</h1>\n      </header>\n      {children}\n      <footer>\n        <p>My App footer</p>\n      </footer>\n    </div>\n  )\n}\n")),(0,i.kt)("h4",{id:"setupfn-clientimport-optional"},(0,i.kt)("inlineCode",{parentName:"h4"},"setupFn: ClientImport")," (optional)"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"setupFn")," declares a JavaScript function that Wasp executes on the client\nbefore everything else. It is expected to be asynchronous, and\nWasp will await its completion before rendering the page. The function takes no\narguments, and its return value is ignored."),(0,i.kt)("p",null,"You can use this function to perform any custom setup (e.g., setting up\nclient-side periodic jobs)."),(0,i.kt)("p",null,"Here's a dummy example of such a function:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="src/client/myClientSetupCode.js"',title:'"src/client/myClientSetupCode.js"'},"export default async function mySetupFunction() {\n  let count = 1;\n  setInterval(\n    () => console.log(`You have been online for ${count++} hours.`),\n    1000 * 60 * 60,\n  )\n}\n")),(0,i.kt)("h5",{id:"overriding-default-behaviour-for-queries"},"Overriding default behaviour for Queries"),(0,i.kt)("p",null,"As mentioned, our ",(0,i.kt)("inlineCode",{parentName:"p"},"useQuery")," hook uses ",(0,i.kt)("em",{parentName:"p"},"react-query"),"'s hook of the same name.\nSince ",(0,i.kt)("em",{parentName:"p"},"react-query")," comes configured with aggressive but sane default options,\nyou most likely won't have to change those defaults for all Queries (you can\nchange them for a single Query using the ",(0,i.kt)("inlineCode",{parentName:"p"},"options")," object, as described\n",(0,i.kt)("a",{parentName:"p",href:"#the-usequery-hook"},"here"),")."),(0,i.kt)("p",null,"Still, if you do need the global defaults, you can do so inside client setup\nfunction. Wasp exposes a ",(0,i.kt)("inlineCode",{parentName:"p"},"configureQueryClient")," hook that lets you configure\n",(0,i.kt)("em",{parentName:"p"},"react-query"),"'s ",(0,i.kt)("inlineCode",{parentName:"p"},"QueryClient")," object:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="src/client/myClientSetupCode.js"',title:'"src/client/myClientSetupCode.js"'},"import { configureQueryClient } from '@wasp/queryClient'\n\nexport default async function mySetupFunction() {\n  // ... some setup\n  configureQueryClient({\n    defaultOptions: {\n      queries: {\n        staleTime: Infinity,\n      }\n    }\n  })\n  // ... some more setup\n}\n")),(0,i.kt)("p",null,"Make sure to pass in an object expected by the ",(0,i.kt)("inlineCode",{parentName:"p"},"QueryClient"),"'s constructor, as\nexplained in\n",(0,i.kt)("a",{parentName:"p",href:"https://tanstack.com/query/v4/docs/react/reference/QueryClient"},(0,i.kt)("em",{parentName:"a"},"react-query"),"'s docs"),"."),(0,i.kt)("h2",{id:"public-static-files-on-the-client"},"Public static files on the client"),(0,i.kt)("p",null,"If you wish to override the default ",(0,i.kt)("inlineCode",{parentName:"p"},"favicon.ico")," file or expose any other static files to the client, you can do so by placing them in the ",(0,i.kt)("inlineCode",{parentName:"p"},"public")," directory in the ",(0,i.kt)("inlineCode",{parentName:"p"},"src/client")," folder."),(0,i.kt)("p",null,"The contents of this directory will be copied to the ",(0,i.kt)("inlineCode",{parentName:"p"},"dist/public")," directory during the build process. This makes these files available at the root of the domain. For example, if you have a file ",(0,i.kt)("inlineCode",{parentName:"p"},"favicon.ico")," in the ",(0,i.kt)("inlineCode",{parentName:"p"},"public")," directory, it will be available at ",(0,i.kt)("inlineCode",{parentName:"p"},"https://example.com/favicon.ico"),"."),(0,i.kt)("p",null,"For example, doing this:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"src\n\u2514\u2500\u2500 client\n    \u251c\u2500\u2500 public\n    \u2502   \u2514\u2500\u2500 favicon.ico\n    \u2514\u2500\u2500 ...\n")),(0,i.kt)("p",null,"will result in the following directory structure in the ",(0,i.kt)("inlineCode",{parentName:"p"},"build")," folder:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"build\n\u2514\u2500\u2500 public\n    \u2514\u2500\u2500 favicon.ico\n")),(0,i.kt)("admonition",{title:"Usage in client code",type:"warning"},(0,i.kt)("p",{parentName:"admonition"},"You ",(0,i.kt)("strong",{parentName:"p"},"can't import these files")," from your client code. They are only exposed at the root of the domain, e.g. ",(0,i.kt)("inlineCode",{parentName:"p"},"https://example.com/favicon.ico"),".")),(0,i.kt)("h2",{id:"server-configuration"},"Server configuration"),(0,i.kt)("p",null,"Via ",(0,i.kt)("inlineCode",{parentName:"p"},"server")," field of ",(0,i.kt)("inlineCode",{parentName:"p"},"app")," declaration, you can configure the behavior of the Node.js server (one that is executing wasp operations)."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-wasp"},'app MyApp {\n  title: "My app",\n  // ...\n  server: {\n    setupFn: import mySetupFunction from "@server/myServerSetupCode.js"\n  }\n}\n')),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"app.server")," is a dictionary with the following fields:"),(0,i.kt)("h4",{id:"middlewareconfigfn-serverimport-optional"},(0,i.kt)("inlineCode",{parentName:"h4"},"middlewareConfigFn: ServerImport")," (optional)"),(0,i.kt)("p",null,"The import statement to an Express middleware config function. This is a global modification affecting all operations and APIs. See ",(0,i.kt)("a",{parentName:"p",href:"/docs/guides/middleware-customization#1-customize-global-middleware"},"the guide here"),"."),(0,i.kt)("h4",{id:"setupfn-serverimport-optional"},(0,i.kt)("inlineCode",{parentName:"h4"},"setupFn: ServerImport")," (optional)"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"setupFn")," declares a JS function that will be executed on server start. This function is expected to be async and will be awaited before the server starts accepting any requests."),(0,i.kt)("p",null,"It allows you to do any custom setup, e.g. setting up additional database/websockets or starting cron/scheduled jobs."),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"setupFn")," function receives the ",(0,i.kt)("inlineCode",{parentName:"p"},"express.Application")," and the ",(0,i.kt)("inlineCode",{parentName:"p"},"http.Server")," instances as part of its context. They can be useful for setting up any custom server routes or for example, setting up ",(0,i.kt)("inlineCode",{parentName:"p"},"socket.io"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"export type ServerSetupFn = (context: ServerSetupFnContext) => Promise<void>\n\nexport type ServerSetupFnContext = {\n  app: Application, // === express.Application\n  server: Server,   // === http.Server\n}\n")),(0,i.kt)("p",null,"As an example, adding a custom route would look something like:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="src/server/myServerSetupCode.ts"',title:'"src/server/myServerSetupCode.ts"'},"import { ServerSetupFn, Application } from '@wasp/types'\n\nconst mySetupFunction: ServerSetupFn = async ({ app }) => {\n  addCustomRoute(app)\n}\n\nfunction addCustomRoute(app: Application) {\n  app.get('/customRoute', (_req, res) => {\n    res.send('I am a custom route')\n  })\n}\n")),(0,i.kt)("p",null,"In case you want to store some values for later use, or to be accessed by the Operations, recommended way is to store those in variables in the same module/file where you defined the javascript setup function and then expose additional functions for reading those values, which you can then import directly from Operations and use. This effectively turns your module into a singleton whose construction is performed on server start."),(0,i.kt)("p",null,"Dummy example of such function and its usage:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="src/server/myServerSetupCode.js"',title:'"src/server/myServerSetupCode.js"'},"let someResource = undefined\n\nconst mySetupFunction = async () => {\n  // Let's pretend functions setUpSomeResource and startSomeCronJob\n  // are implemented below or imported from another file.\n  someResource = await setUpSomeResource()\n  startSomeCronJob()\n}\n\nexport const getSomeResource = () => someResource\n\nexport default mySetupFunction\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="src/server/queries.js"',title:'"src/server/queries.js"'},"import { getSomeResource } from './myServerSetupCode.js'\n\n...\n\nexport const someQuery = async (args, context) => {\n  const someResource = getSomeResource()\n  return queryDataFromSomeResource(args, someResource)\n}\n")),(0,i.kt)("h2",{id:"env"},".env"),(0,i.kt)("p",null,"Your project will likely be using environment variables for configuration, typically to define connection to the database, API keys for external services and similar."),(0,i.kt)("p",null,"When in production, you will typically define environment variables through mechanisms provided by your hosting provider."),(0,i.kt)("p",null,'However, when in development, you might also need to supply certain environment variables, and to avoid doing it "manually", Wasp supports ',(0,i.kt)("inlineCode",{parentName:"p"},".env")," (dotenv) files where you can define environment variables that will be used during development (they will not be used during production)."),(0,i.kt)("p",null,"Since environmental variables are usually different for server-side and client apps, in Wasp root directly you can create two files, ",(0,i.kt)("inlineCode",{parentName:"p"},".env.server")," for server-side of your Wasp project, and ",(0,i.kt)("inlineCode",{parentName:"p"},".env.client")," for client side (or web app) of Wasp project."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},".env.server")," and ",(0,i.kt)("inlineCode",{parentName:"p"},".env.client")," files have to be defined in the root of your Wasp project."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},".env.server")," and ",(0,i.kt)("inlineCode",{parentName:"p"},".env.client")," files should not be committed to the version control - we already ignore it by default in the .gitignore file we generate when you create a new Wasp project via ",(0,i.kt)("inlineCode",{parentName:"p"},"wasp new")," cli command."),(0,i.kt)("p",null,"Variables are defined in ",(0,i.kt)("inlineCode",{parentName:"p"},".env.server")," or ",(0,i.kt)("inlineCode",{parentName:"p"},".env.client")," files in the form of ",(0,i.kt)("inlineCode",{parentName:"p"},"NAME=VALUE"),", for example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"DATABASE_URL=postgresql://localhost:5432\nMY_VAR=somevalue\n")),(0,i.kt)("p",null,"Any env vars defined in the ",(0,i.kt)("inlineCode",{parentName:"p"},".env.server")," / ",(0,i.kt)("inlineCode",{parentName:"p"},".env.client")," files will be forwarded to the server-side / web app of your Wasp project and therefore accessible in your javascript code via ",(0,i.kt)("inlineCode",{parentName:"p"},"process.env"),", for example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"console.log(process.env.DATABASE_URL)\n")),(0,i.kt)("h2",{id:"database-configuration"},"Database configuration"),(0,i.kt)("p",null,"Via ",(0,i.kt)("inlineCode",{parentName:"p"},"db")," field of ",(0,i.kt)("inlineCode",{parentName:"p"},"app")," declaration, you can configure the database used by Wasp."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-wasp"},'app MyApp {\n  title: "My app",\n  // ...\n  db: {\n    system: PostgreSQL,\n    seeds: [\n      import devSeed from "@server/dbSeeds.js"\n    ],\n    prisma: {\n      clientPreviewFeatures: ["extendedWhereUnique"]\n    }\n  }\n}\n')),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"app.db")," is a dictionary with following fields:"),(0,i.kt)("h4",{id:"--system-dbsystem-optional"},"- ",(0,i.kt)("inlineCode",{parentName:"h4"},"system: DbSystem")," (Optional)"),(0,i.kt)("p",null,"The database system Wasp will use. It can be either ",(0,i.kt)("inlineCode",{parentName:"p"},"PostgreSQL")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"SQLite"),".\nIf not defined, or even if whole ",(0,i.kt)("inlineCode",{parentName:"p"},"db")," field is not present, default value is ",(0,i.kt)("inlineCode",{parentName:"p"},"SQLite"),".\nIf you add/remove/modify ",(0,i.kt)("inlineCode",{parentName:"p"},"db")," field, run ",(0,i.kt)("inlineCode",{parentName:"p"},"wasp db migrate-dev")," to apply the changes."),(0,i.kt)("h4",{id:"--seeds-serverimport-optional"},"- ",(0,i.kt)("inlineCode",{parentName:"h4"},"seeds: [ServerImport]")," (Optional)"),(0,i.kt)("p",null,"Defines seed functions that you can use via ",(0,i.kt)("inlineCode",{parentName:"p"},"wasp db seed")," to seed your database with initial data.\nCheck out ",(0,i.kt)("a",{parentName:"p",href:"#seeding"},"Seeding")," section for more details."),(0,i.kt)("h4",{id:"--prisma-prismaoptions-optional"},"- ",(0,i.kt)("inlineCode",{parentName:"h4"},"prisma: [PrismaOptions]")," (Optional)"),(0,i.kt)("p",null,"Additional configuration for Prisma.\nIt currently only supports a single field:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"clientPreviewFeatures : string")," - allows you to define ",(0,i.kt)("a",{parentName:"li",href:"https://www.prisma.io/docs/concepts/components/preview-features/client-preview-features"},"Prisma client preview features"),".")),(0,i.kt)("h3",{id:"sqlite"},"SQLite"),(0,i.kt)("p",null,"Default database is ",(0,i.kt)("inlineCode",{parentName:"p"},"SQLite"),", since it is great for getting started with a new project (needs no configuring), but it can be used only in development - once you want to deploy Wasp to production you will need to switch to ",(0,i.kt)("inlineCode",{parentName:"p"},"PostgreSQL")," and stick with it.\nCheck below for more details on how to migrate from SQLite to PostgreSQL."),(0,i.kt)("h3",{id:"postgresql"},"PostgreSQL"),(0,i.kt)("p",null,"When using ",(0,i.kt)("inlineCode",{parentName:"p"},"PostgreSQL")," as your database (",(0,i.kt)("inlineCode",{parentName:"p"},"app: { db: { system: PostgreSQL } }"),"), you will need to make sure you have a postgres database running during development (when running ",(0,i.kt)("inlineCode",{parentName:"p"},"wasp start")," or doing ",(0,i.kt)("inlineCode",{parentName:"p"},"wasp db ...")," commands)."),(0,i.kt)("h3",{id:"using-wasp-provided-dev-database"},"Using Wasp provided dev database"),(0,i.kt)("p",null,"Wasp provides ",(0,i.kt)("inlineCode",{parentName:"p"},"wasp start db")," command that starts the default dev db for you."),(0,i.kt)("p",null,"Your Wasp app will automatically connect to it once you have it running via ",(0,i.kt)("inlineCode",{parentName:"p"},"wasp start db"),", no additional configuration is needed. This command relies on Docker being installed on your machine."),(0,i.kt)("h3",{id:"connecting-to-existing-database"},"Connecting to existing database"),(0,i.kt)("p",null,"If instead of using ",(0,i.kt)("inlineCode",{parentName:"p"},"wasp start db")," you would rather spin up your own dev database or connect to some external database, you will need to provide Wasp with ",(0,i.kt)("inlineCode",{parentName:"p"},"DATABASE_URL")," environment variable that Wasp will use to connect to it."),(0,i.kt)("p",null,"The easiest way to provide the needed ",(0,i.kt)("inlineCode",{parentName:"p"},"DATABASE_URL")," environment variable is by adding it to the ",(0,i.kt)("a",{parentName:"p",href:"https://wasp-lang.dev/docs/language/features#env"},".env.server")," file in the root dir of your Wasp project (if that file doesn't yet exist, create it)."),(0,i.kt)("p",null,"You can also set it per command by doing ",(0,i.kt)("inlineCode",{parentName:"p"},"DATABASE_URL=<my-db-url> wasp ...")," -> this can be useful if you want to run specific ",(0,i.kt)("inlineCode",{parentName:"p"},"wasp")," command on a specific database.\nExample: you could do ",(0,i.kt)("inlineCode",{parentName:"p"},"DATABASE_URL=<my-db-url> wasp db seed myProdSeed")," to seed data for a fresh staging or production database."),(0,i.kt)("h3",{id:"migrating-from-sqlite-to-postgresql"},"Migrating from SQLite to PostgreSQL"),(0,i.kt)("p",null,"To run Wasp app in production, you will need to switch from ",(0,i.kt)("inlineCode",{parentName:"p"},"SQLite")," to ",(0,i.kt)("inlineCode",{parentName:"p"},"PostgreSQL"),"."),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Set ",(0,i.kt)("inlineCode",{parentName:"li"},"app.db.system")," to ",(0,i.kt)("inlineCode",{parentName:"li"},"PostgreSQL"),"."),(0,i.kt)("li",{parentName:"ol"},"Delete old migrations, since they are SQLite migrations and can't be used with PostgreSQL: ",(0,i.kt)("inlineCode",{parentName:"li"},"rm -r migrations/"),"."),(0,i.kt)("li",{parentName:"ol"},"Run ",(0,i.kt)("inlineCode",{parentName:"li"},"wasp start db")," to start your new db running (or check instructions above if you prefer using your own db). Leave it running, since we need it for the next step."),(0,i.kt)("li",{parentName:"ol"},"In a different terminal, run ",(0,i.kt)("inlineCode",{parentName:"li"},"wasp db migrate-dev")," to apply new changes and create new, initial migration."),(0,i.kt)("li",{parentName:"ol"},"That is it, you are all done!")),(0,i.kt)("h3",{id:"seeding"},"Seeding"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Database seeding")," is a term for populating database with some initial data."),(0,i.kt)("p",null,"Seeding is most commonly used for two following scenarios:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"To put development database into a state convenient for testing / playing with it."),(0,i.kt)("li",{parentName:"ol"},"To initialize dev/staging/prod database with some essential data needed for it to be useful,\nfor example default currencies in a Currency table.")),(0,i.kt)("h4",{id:"writing-a-seed-function"},"Writing a seed function"),(0,i.kt)("p",null,"Wasp enables you to define multiple ",(0,i.kt)("strong",{parentName:"p"},"seed functions")," via ",(0,i.kt)("inlineCode",{parentName:"p"},"app.db.seeds"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-wasp"},'app MyApp {\n  // ...\n  db: {\n    // ...\n    seeds: [\n      import { devSeedSimple } from "@server/dbSeeds.js",\n      import { prodSeed } from "@server/dbSeeds.js"\n    ]\n  }\n}\n')),(0,i.kt)("p",null,"Each seed function is expected to be an async function that takes one argument, ",(0,i.kt)("inlineCode",{parentName:"p"},"prismaClient"),", which is a ",(0,i.kt)("a",{parentName:"p",href:"https://www.prisma.io/docs/concepts/components/prisma-client/crud"},"Prisma Client")," instance that you can use to interact with the database.\nThis is the same instance of Prisma Client that Wasp uses internally, so you e.g. get password hashing for free."),(0,i.kt)("p",null,"Since a seed function is part of the server-side code, it can also import other server-side code, so you can and will normally want to import and use Actions to perform the seeding."),(0,i.kt)("p",null,"Example of a seed function that imports an Action (+ a helper function to create a user):"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},'import { createTask } from \'./actions.js\'\n\nexport const devSeedSimple = async (prismaClient) => {\n  const user = await createUser(prismaClient, {\n      username: "RiuTheDog",\n      password: "bark1234"\n  })\n\n  await createTask(\n    { description: "Chase the cat" },\n    { user, entities: { Task: prismaClient.task } }\n  )\n}\n\nasync function createUser (prismaClient, data) {\n  const { password, ...newUser } = await prismaClient.user.create({ data })\n  return newUser\n}\n')),(0,i.kt)("h4",{id:"running-seed-functions"},"Running seed functions"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"wasp db seed"),": If you have just one seed function, it will run it. If you have multiple, it will interactively ask you to choose one to run.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"wasp db seed <seed-name>"),": It will run the seed function with the specified name, where the name is the identifier you used in its ",(0,i.kt)("inlineCode",{parentName:"p"},"import")," expression in the ",(0,i.kt)("inlineCode",{parentName:"p"},"app.db.seeds")," list. Example: ",(0,i.kt)("inlineCode",{parentName:"p"},"wasp db seed devSeedSimple"),"."))),(0,i.kt)("admonition",{type:"tip"},(0,i.kt)("p",{parentName:"admonition"},"  Often you will want to call ",(0,i.kt)("inlineCode",{parentName:"p"},"wasp db seed")," right after you ran ",(0,i.kt)("inlineCode",{parentName:"p"},"wasp db reset"),": first you empty your database, then you fill it with some initial data.")),(0,i.kt)("h2",{id:"email-sender"},"Email sender"),(0,i.kt)("h4",{id:"provider-emailprovider-required"},(0,i.kt)("inlineCode",{parentName:"h4"},"provider: EmailProvider")," (required)"),(0,i.kt)("p",null,"We support multiple different providers for sending e-mails: ",(0,i.kt)("inlineCode",{parentName:"p"},"SMTP"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"SendGrid")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"Mailgun"),"."),(0,i.kt)("h3",{id:"smtp"},"SMTP"),(0,i.kt)("p",null,"SMTP e-mail sender uses your SMTP server to send e-mails."),(0,i.kt)("p",null,"Read ",(0,i.kt)("a",{parentName:"p",href:"/docs/advanced/email#using-the-smtp-provider"},"our guide")," for setting up SMTP for more details."),(0,i.kt)("h3",{id:"sendgrid"},"SendGrid"),(0,i.kt)("p",null,"SendGrid is a popular service for sending e-mails that provides both API and SMTP methods of sending e-mails. We use their official SDK for sending e-mails."),(0,i.kt)("p",null,"Check out ",(0,i.kt)("a",{parentName:"p",href:"/docs/advanced/email#using-the-sendgrid-provider"},"our guide")," for setting up Sendgrid for more details."),(0,i.kt)("h3",{id:"mailgun"},"Mailgun"),(0,i.kt)("p",null,"Mailgun is a popular service for sending e-mails that provides both API and SMTP methods of sending e-mails. We use their official SDK for sending e-mails."),(0,i.kt)("p",null,"Check out ",(0,i.kt)("a",{parentName:"p",href:"/docs/advanced/email#using-the-mailgun-provider"},"our guide")," for setting up Mailgun for more details."),(0,i.kt)("h4",{id:"defaultsender-emailfromfield-optional"},(0,i.kt)("inlineCode",{parentName:"h4"},"defaultSender: EmailFromField")," (optional)"),(0,i.kt)("p",null,"You can optionally provide a default sender info that will be used when you don't provide it explicitly when sending an e-mail."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-wasp"},'app MyApp {\n  title: "My app",\n  // ...\n  emailSender: {\n    provider: SMTP,\n    defaultFrom: {\n      name: "Hello",\n      email: "hello@itsme.com"\n    },\n  },\n}\n')),(0,i.kt)("p",null,"After you set up the email sender, you can use it in your code to send e-mails. For example, you can send an e-mail when a user signs up, or when a user resets their password."),(0,i.kt)("h3",{id:"sending-e-mails"},"Sending e-mails"),(0,i.kt)(s.ZP,{mdxType:"SendingEmailsInDevelopment"}),(0,i.kt)("p",null,"To send an e-mail, you can use the ",(0,i.kt)("inlineCode",{parentName:"p"},"emailSender")," that is provided by the ",(0,i.kt)("inlineCode",{parentName:"p"},"@wasp/email")," module."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="src/actions/sendEmail.js"',title:'"src/actions/sendEmail.js"'},"import { emailSender } from '@wasp/email/index.js'\n\n// In some action handler...\nconst info = await emailSender.send({\n    to: 'user@domain.com',\n    subject: 'Saying hello',\n    text: 'Hello world',\n    html: 'Hello <strong>world</strong>'\n})\n")))}g.isMDXComponent=!0}}]);